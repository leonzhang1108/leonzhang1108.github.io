{"version":3,"sources":["webpack:///./src/pages/Tetris/constant.tsx","webpack:///./src/pages/Tetris/tools.tsx"],"names":["keyCode","left","up","right","down","space","block","L","J","O","T","Z","S","I","scores","blockMap","couldMoveLeftOrRight","rx","y","playboard","length","blockList","couldMove","forEach","row","dy","every","item","dx","push","x","ox","oy","nx","ny","couldMoveFun","_","width","bottomBlockList","i","l","next","b","getCurrPosition","cBlock","screen","rotate","moveTo","clone","max","center","Math","floor","index","cm","curr"],"mappings":"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","file":"js/34.2357075335f65f4693c3.bundle.js","sourcesContent":["export default {\n  keyCode: {\n    left: 37,\n    up: 38,\n    right: 39,\n    down: 40,\n    space: 32\n  },\n  block: {\n    L: [\n      [\n        [0, 0, 1],\n        [1, 1, 1]\n      ],\n      [\n        [1, 1],\n        [0, 1],\n        [0, 1]\n      ],\n      [\n        [1, 1, 1],\n        [1, 0, 0]\n      ],\n      [\n        [1, 0],\n        [1, 0],\n        [1, 1]\n      ]\n    ],\n    J: [\n      [\n        [1, 0, 0],\n        [1, 1, 1]\n      ],\n      [\n        [1, 1],\n        [1, 0],\n        [1, 0]\n      ],\n      [\n        [1, 1, 1],\n        [0, 0, 1]\n      ],\n      [\n        [0, 1],\n        [0, 1],\n        [1, 1]\n      ]\n    ],\n    O: [\n      [\n        [1, 1],\n        [1, 1]\n      ],\n      [\n        [1, 1],\n        [1, 1]\n      ],\n      [\n        [1, 1],\n        [1, 1]\n      ],\n      [\n        [1, 1],\n        [1, 1]\n      ]\n    ],\n    T: [\n      [\n        [0, 1, 0],\n        [1, 1, 1]\n      ],\n      [\n        [0, 1],\n        [1, 1],\n        [0, 1]\n      ],\n      [\n        [1, 1, 1],\n        [0, 1, 0]\n      ],\n      [\n        [1, 0],\n        [1, 1],\n        [1, 0]\n      ]\n    ],\n    Z: [\n      [\n        [1, 1, 0],\n        [0, 1, 1]\n      ],\n      [\n        [0, 1],\n        [1, 1],\n        [1, 0]\n      ],\n      [\n        [1, 1, 0],\n        [0, 1, 1]\n      ],\n      [\n        [0, 1],\n        [1, 1],\n        [1, 0]\n      ]\n    ],\n    S: [\n      [\n        [0, 1, 1],\n        [1, 1, 0]\n      ],\n      [\n        [1, 0],\n        [1, 1],\n        [0, 1]\n      ],\n      [\n        [0, 1, 1],\n        [1, 1, 0]\n      ],\n      [\n        [1, 0],\n        [1, 1],\n        [0, 1]\n      ]\n    ],\n    I: [\n      [[1, 1, 1, 1]],\n      [[1], [1], [1], [1]],\n      [[1, 1, 1, 1]],\n      [[1], [1], [1], [1]]\n    ]\n  },\n  scores: [1, 3, 5, 10]\n}\n","import Utils from '@utils'\nimport Constant from './constant'\nconst { block: blockMap, keyCode } = Constant\n\nconst couldMoveLeftOrRight = ({ width, block, rx, y, playboard, length }) => {\n  const blockList: any[] = []\n  let couldMove = true\n  block.forEach((row, dy) => {\n    row.every((item, dx) => {\n      if (item) {\n        blockList.push({ x: dx, y: dy })\n      }\n      return true\n    })\n  })\n  blockList.every(item => {\n    const { x: ox, y: oy } = item\n    const nx = ox + rx\n    const ny = y + oy - length\n    if (ny >= 0 && ny < 20 && playboard[ny][nx]) {\n      couldMove = false\n    }\n    return couldMove\n  })\n  return couldMove\n}\n\nconst couldMoveFun = {\n  [keyCode.up]: ({ width, block, rx, y, playboard, length }) => {\n    let couldMove = true\n    block.every((row, dy) => {\n      row.every((_, dx) => {\n        const nx = dx + rx\n        const ny = y + dy - length\n        if (ny >= 0 && ny < 20 && playboard[ny][nx]) {\n          couldMove = false\n        }\n        return couldMove\n      })\n      return couldMove\n    })\n    return couldMove\n  },\n  [keyCode.down]: ({ width, block, rx, y, playboard, length }) => {\n    if (y === 21) {\n      return false\n    }\n    let couldMove = true\n    const bottomBlockList: any[] = []\n    for (let i = 0; i < width; i++) {\n      let l = block.length - 1\n      let next = true\n      while (l >= 0 && next) {\n        if (block[l][i]) {\n          bottomBlockList.push({ x: i, y: l })\n          next = false\n        }\n        l--\n      }\n    }\n    bottomBlockList.every(b => {\n      const { x: ox, y: oy } = b\n      const nx = ox + rx\n      const ny = y + oy - length\n      if (ny >= 0 && ny < 20 && playboard[ny][nx]) {\n        couldMove = false\n      }\n      return couldMove\n    })\n    return couldMove\n  },\n  [keyCode.left]: couldMoveLeftOrRight,\n  [keyCode.right]: couldMoveLeftOrRight\n}\n\nexport default {\n  getCurrPosition: ({ x, y, cBlock, screen, rotate, moveTo }) => {\n    const playboard = Utils.clone(screen)\n    const block: number[][] = blockMap[cBlock][rotate]\n    const width = block[0].length\n    const min = 0\n    const max = 10 - width\n    const center = Math.floor((10 - width) / 2)\n    let length = block.length\n    let index = y\n    let rx = center + x\n    if (rx < min) {\n      rx = min\n      x = -center\n    }\n    if (rx > max) {\n      rx = max\n      x = width % 2 === 1 ? center + 1 : center\n    }\n    const cm = couldMoveFun[moveTo]({ width, block, rx, y, playboard, length })\n\n    if (cm) {\n      while (index > 0 && length > 0) {\n        let curr = --index\n        const row = block[length - 1]\n        curr = curr > 20 ? 20 : curr\n        for (let i = 0; i < 10; i++) {\n          if (i < row.length) {\n            const b = playboard[curr][rx + i]\n            if (!b) {\n              playboard[curr][rx + i] = row[i]\n            }\n          }\n        }\n        length--\n      }\n    }\n\n    return { playboard, x, screen, couldMove: cm }\n  }\n}\n"],"sourceRoot":""}