{"version":3,"sources":["webpack:///./src/pages/Camera/index.tsx"],"names":["w","window","tracking","navigator","props","frame","userMedia","mediaDevices","startDrawing","getUserMedia","video","audio","then","stream","doDrawing","apply","catch","error","setState","hasCamera","console","log","tracker","ObjectTracker","setInitialScale","setStepSize","setEdgesDensity","task","track","camera","on","event","data","forEach","rect","x","y","width","height","run","state","index","random","componentWillUnmount","this","stop","componentDidMount","render","className","style","transform","id","ref","el","v","autoPlay","Component"],"mappings":"ufAMMA,EAAIC,OAEJC,GADOC,UACIH,EAAEE,UAWnB,cAME,WAAYE,GAAZ,MACE,YAAMA,IAAM,K,OAHd,EAAAC,MAAQ,CAAC,SAAU,aAAc,UAAW,SAAU,MAAO,aAc7D,EAAAC,UAAY,WAAM,OAAAH,UAAUI,cAAgB,MAE5C,EAAAC,aAAe,WACT,EAAKF,YACPH,UAAUI,aACPE,aAAa,CACZC,OAAO,EACPC,OAAO,IAERC,MAAK,SAAAC,GACJ,EAAKC,UAAUC,MAAM,MAEtBC,OAAM,SAAAC,GACL,EAAKC,SAAS,CAAEC,WAAW,IAC3BC,QAAQC,IAAIJ,MAGhB,EAAKC,SAAS,CAAEC,WAAW,KAI/B,EAAAL,UAAY,WACF,IACFQ,EAAU,IAAIC,EADMrB,EAAQ,eACA,QAClCoB,EAAQE,gBAAgB,GACxBF,EAAQG,YAAY,GACpBH,EAAQI,gBAAgB,IACxB,EAAKC,KAAOzB,EAAS0B,MAAM,SAAUN,EAAS,CAAEO,QAAQ,IACxDP,EAAQQ,GAAG,SAAS,SAAAC,GAClBA,EAAMC,KAAKC,SAAQ,SAAAC,GACT,IAAAC,EAAwBD,EAAI,EAAzBE,EAAqBF,EAAI,EAAtBG,EAAkBH,EAAI,MAAfI,EAAWJ,EAAI,OACpC,EAAKhB,SAAS,CAAEiB,EAAC,EAAEC,EAAC,EAAEC,MAAK,EAAEC,OAAM,UAGvC,EAAKX,KAAKY,OA5CV,EAAKC,MAAQ,CACXrB,WAAW,EACXgB,EAAG,EACHC,EAAG,EACHE,OAAQ,IACRD,MAAO,IACPI,MAAO,IAAMC,OAAO,EAAG,I,EAyF7B,OAvGqB,OAuDnB,YAAAC,qBAAA,WACMC,KAAKjB,MAAQiB,KAAKjB,KAAKkB,MACzBD,KAAKjB,KAAKkB,QAId,YAAAC,kBAAA,WACEF,KAAKpC,gBAGP,YAAAuC,OAAA,sBACQ,EAA4CH,KAAKJ,MAA/CrB,EAAS,YAAEgB,EAAC,IAAEC,EAAC,IAAEE,EAAM,SAAED,EAAK,QAAEI,EAAK,QAE7C,OAAOtB,EACL,yBAAK6B,UAAU,QACb,yBACEA,UAAU,gBACVC,MAAO,CAAEC,UAAW,gBAAgBf,EAAC,OAAOC,EAAC,WAE7C,yBACEY,UAAW,SAASJ,KAAKvC,MAAMoC,GAC/BQ,MAAO,CAAEX,OAAWA,EAAM,KAAMD,MAAUA,EAAK,OAE/C,yBAAKW,UAAU,oBACf,yBAAKA,UAAU,qBACf,yBAAKA,UAAU,wBACf,yBAAKA,UAAU,uBACf,yBAAKA,UAAU,aACf,yBAAKA,UAAU,cACf,yBAAKA,UAAU,eACf,yBAAKA,UAAU,kBAGnB,2BACEG,GAAG,QACHH,UAAU,QACVX,MAAM,OACNC,OAAO,OACPc,IAAK,SAAAC,GAAM,OAAC,EAAKC,EAAID,GACrBE,UAAU,KAId,yBAAKP,UAAU,SACb,6CAIR,EAvGA,CAAqB,IAAMQ,WAyGZ","file":"js/20.510cde258441dde8a92a.bundle.js","sourcesContent":["import Utils from '@utils'\nimport React from 'react'\nimport 'tracking'\nimport 'tracking/build/data/face-min.js'\nimport './index.less'\n\nconst w = window as any\nconst navi = navigator as any\nconst tracking = w.tracking\n\ninterface IState {\n  hasCamera: boolean;\n  x: number;\n  y: number;\n  height: number;\n  width: number;\n  index: number;\n}\n\nclass Camera extends React.Component<null, IState> {\n  v\n  task\n\n  frame = ['threat', 'big threat', 'machine', 'analog', 'gov', 'president']\n\n  constructor(props) {\n    super(props)\n    this.state = {\n      hasCamera: true,\n      x: 0,\n      y: 0,\n      height: 150,\n      width: 150,\n      index: Utils.random(0, 5)\n    }\n  }\n\n  userMedia = () => navigator.mediaDevices || null\n\n  startDrawing = () => {\n    if (this.userMedia()) {\n      navigator.mediaDevices\n        .getUserMedia({\n          video: true,\n          audio: false\n        })\n        .then(stream => {\n          this.doDrawing.apply(this)\n        })\n        .catch(error => {\n          this.setState({ hasCamera: false })\n          console.log(error)\n        })\n    } else {\n      this.setState({ hasCamera: false })\n    }\n  }\n\n  doDrawing = () => {\n    const { ObjectTracker } = tracking\n    const tracker = new ObjectTracker('face')\n    tracker.setInitialScale(4)\n    tracker.setStepSize(1)\n    tracker.setEdgesDensity(0.1)\n    this.task = tracking.track('#video', tracker, { camera: true })\n    tracker.on('track', event => {\n      event.data.forEach(rect => {\n        const { x, y, width, height } = rect\n        this.setState({ x, y, width, height })\n      })\n    })\n    this.task.run()\n  }\n\n  componentWillUnmount() {\n    if (this.task && this.task.stop) {\n      this.task.stop()\n    }\n  }\n\n  componentDidMount() {\n    this.startDrawing()\n  }\n\n  render() {\n    const { hasCamera, x, y, height, width, index } = this.state\n\n    return hasCamera ? (\n      <div className=\"home\">\n        <div\n          className=\"frame-wrapper\"\n          style={{ transform: `translate3d( ${x}px, ${y}px, 0)` }}\n        >\n          <div\n            className={`frame ${this.frame[index]}`}\n            style={{ height: `${height}px`, width: `${width}px` }}\n          >\n            <div className=\"top-left corner\" />\n            <div className=\"top-right corner\" />\n            <div className=\"bottom-right corner\" />\n            <div className=\"bottom-left corner\" />\n            <div className=\"top line\" />\n            <div className=\"left line\" />\n            <div className=\"right line\" />\n            <div className=\"bottom line\" />\n          </div>\n        </div>\n        <video\n          id=\"video\"\n          className=\"video\"\n          width=\"100%\"\n          height=\"100%\"\n          ref={el => (this.v = el)}\n          autoPlay={true}\n        />\n      </div>\n    ) : (\n      <div className=\"empty\">\n        <span>no camera</span>\n      </div>\n    )\n  }\n}\n\nexport default Camera\n"],"sourceRoot":""}