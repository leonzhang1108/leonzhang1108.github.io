{"version":3,"sources":["webpack:///./src/pages/Reversi/tools.tsx","webpack:///./src/pages/Reversi/index.tsx"],"names":["directionMap","statusMap","check","x","y","checkerboard","player","direction","dx","dy","result","click","couldClick","some","clickToCover","reverse","forEach","cx","cy","push","c","r","props","reset","e","initCheckerboard","state","history","step","size","setState","flatten","length","arr","reduce","a","b","concat","Array","isArray","itemMouseEnter","blackHover","whiteHover","itemMouseLeave","itemClick","black","white","curr","pass","retract","pop","empty","renderItem","item","rowIndex","itemIndex","status","className","key","onClick","handle","onMouseOver","onMouseLeave","join","renderRow","row","map","getScore","isWin","content","title","info","render","this","isMobile","disablePass","Object","keys","type","disabled","Component","connect","component","Reversi","mapStateToProps","common"],"mappings":"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","file":"js/16.f648a9107a7146fbe0ff.bundle.js","sourcesContent":["const directionMap = [\n  [0, 1],\n  [0, -1],\n  [-1, 0],\n  [1, 0],\n  [-1, -1],\n  [-1, 1],\n  [1, -1],\n  [1, 1]\n]\n\nconst statusMap = {\n  empty: 0,\n  black: 1,\n  white: 2\n}\n\nconst borderMax = 7\n\ninterface IReverse {\n  x: number;\n  y: number;\n}\n\nconst check = ({ x, y, checkerboard, player, direction }) => {\n  const [dx, dy] = direction\n  let result = 0\n  let click = player ? statusMap.black : statusMap.white\n  x += dx\n  y += dy\n  while (x >= 0 && x <= borderMax && y >= 0 && y <= borderMax) {\n    if (checkerboard[x][y] === statusMap.empty || result === 2) {\n      break\n    }\n    if (checkerboard[x][y] === click) {\n      result++\n      click = !player ? statusMap.black : statusMap.white\n    } else {\n      if (result !== 1) {\n        break\n      }\n    }\n    x += dx\n    y += dy\n  }\n  return result === 2\n}\n\nexport default {\n  couldClick: ({ x, y, checkerboard, player }) =>\n    directionMap.some(direction =>\n      check({ x, y, checkerboard, player, direction })\n    ),\n\n  clickToCover: ({ x, y, checkerboard, player }) => {\n    const reverse: IReverse[] = []\n    directionMap.forEach(direction => {\n      const [dx, dy] = direction\n      let cx = x\n      let cy = y\n      cx += dx\n      cy += dy\n      if (check({ x, y, checkerboard, player, direction })) {\n        while (cx >= 0 && cx <= borderMax && cy >= 0 && cy <= borderMax) {\n          if (\n            checkerboard[cx][cy] === statusMap.empty ||\n            checkerboard[cx][cy] ===\n              (player ? statusMap.white : statusMap.black)\n          ) {\n            break\n          }\n          checkerboard[cx][cy] = player ? statusMap.white : statusMap.black\n          reverse.push({ x: cx, y: cy })\n          cx += dx\n          cy += dy\n        }\n      }\n    })\n    return { c: checkerboard, r: reverse }\n  }\n}\n","import Utils from '@utils'\nimport { Button, Modal } from 'antd'\nimport React from 'react'\nimport './index.less'\nimport Tools from './tools'\n\ninterface IProps {\n  isMobile: boolean;\n}\n\ninterface IState {\n  checkerboard: any[][];\n  step: number;\n  history: any[];\n  size: number;\n}\n\nconst statusMap = {\n  empty: 0,\n  black: 1,\n  white: 2,\n  blackHover: 3,\n  whiteHover: 4\n}\n\nclass Reversi extends React.Component<IProps, IState> {\n  constructor(props) {\n    super(props)\n    this.reset()\n  }\n\n  reset = (e?) => {\n    const { checkerboard, size } = this.initCheckerboard()\n    const state = {\n      checkerboard,\n      history: [],\n      step: 0,\n      size\n    }\n    if (e) {\n      this.setState(state)\n    } else {\n      this.state = { ...state }\n    }\n  }\n\n  initCheckerboard = () => {\n    const checkerboard = [\n      [0, 0, 0, 0, 0, 0, 0, 0],\n      [0, 0, 0, 0, 0, 0, 0, 0],\n      [0, 0, 0, 0, 0, 0, 0, 0],\n      [0, 0, 0, 2, 1, 0, 0, 0],\n      [0, 0, 0, 1, 2, 0, 0, 0],\n      [0, 0, 0, 0, 0, 0, 0, 0],\n      [0, 0, 0, 0, 0, 0, 0, 0],\n      [0, 0, 0, 0, 0, 0, 0, 0]\n    ]\n    return {\n      checkerboard,\n      size: this.flatten(checkerboard).length\n    }\n  }\n\n  flatten = arr =>\n    arr.reduce((a, b) => a.concat(Array.isArray(b) ? this.flatten(b) : b), [])\n\n  couldClick = ({ x, y }) => {\n    const { checkerboard, step } = this.state\n    return Tools.couldClick({ x, y, checkerboard, player: step % 2 })\n  }\n\n  itemMouseEnter = ({ rowIndex: x, itemIndex: y }) => {\n    const { checkerboard, step } = this.state\n    const { blackHover, whiteHover } = statusMap\n    if (checkerboard[x][y] === statusMap.empty && this.couldClick({ x, y })) {\n      checkerboard[x][y] = step % 2 === 0 ? blackHover : whiteHover\n      this.setState({ checkerboard })\n    }\n  }\n\n  itemMouseLeave = ({ rowIndex: x, itemIndex: y }) => {\n    const { checkerboard } = this.state\n    if (\n      checkerboard[x][y] === statusMap.blackHover ||\n      checkerboard[x][y] === statusMap.whiteHover\n    ) {\n      checkerboard[x][y] = statusMap.empty\n      this.setState({ checkerboard })\n    }\n  }\n\n  itemClick = ({ rowIndex: x, itemIndex: y }) => {\n    const { checkerboard, step, history } = this.state\n    const { black, white } = statusMap\n    if (\n      checkerboard[x][y] !== black &&\n      checkerboard[x][y] !== white &&\n      this.couldClick({ x, y })\n    ) {\n      checkerboard[x][y] = step % 2 === 0 ? black : white\n      const { c, r } = Tools.clickToCover({\n        x,\n        y,\n        checkerboard,\n        player: step % 2\n      })\n      history.push({ curr: { x, y }, reverse: r })\n      this.setState({\n        checkerboard: c,\n        step: history.length,\n        history\n      })\n    }\n  }\n\n  pass = () => {\n    const { history } = this.state\n    history.push({})\n    this.setState({\n      step: history.length,\n      history\n    })\n  }\n\n  retract = () => {\n    const { history, checkerboard } = this.state\n    const { curr, reverse } = history.pop()\n    if (curr) {\n      const { x, y } = curr\n      const { empty, black, white } = statusMap\n      checkerboard[x][y] = empty\n      reverse.forEach(r => {\n        checkerboard[r.x][r.y] =\n          checkerboard[r.x][r.y] === white ? black : white\n      })\n    }\n\n    this.setState({ history, step: history.length, checkerboard })\n  }\n\n  renderItem = (item, rowIndex, itemIndex) => {\n    const status = this.state.checkerboard[rowIndex][itemIndex]\n    const { black, white, blackHover, whiteHover } = statusMap\n    const className = status ? ['chosen'] : []\n    if (className.length) {\n      switch (status) {\n        case black:\n          className.push('black selected')\n          break\n        case white:\n          className.push('white selected')\n          break\n        case blackHover:\n          className.push('black')\n          break\n        case whiteHover:\n          className.push('white')\n          break\n      }\n    }\n    return (\n      <td\n        className=\"item\"\n        key={itemIndex}\n        onClick={Utils.handle(this.itemClick, { rowIndex, itemIndex })}\n        onMouseOver={Utils.handle(this.itemMouseEnter, { rowIndex, itemIndex })}\n        onMouseLeave={Utils.handle(this.itemMouseLeave, {\n          rowIndex,\n          itemIndex\n        })}\n      >\n        <div className={className.join(' ')}>\n          <div className=\"chess front\" />\n          <div className=\"chess back\" />\n        </div>\n      </td>\n    )\n  }\n\n  renderRow = (row, rowIndex) => (\n    <tr className=\"row\" key={rowIndex}>\n      {row.map((item, itemIndex) => this.renderItem(item, rowIndex, itemIndex))}\n    </tr>\n  )\n\n  getScore = () => {\n    const { checkerboard } = this.state\n    let black = 0\n    let white = 0\n    checkerboard.forEach(row =>\n      row.forEach(item => {\n        if (item === statusMap.black) {\n          black++\n        }\n        if (item === statusMap.white) {\n          white++\n        }\n      })\n    )\n    return { black, white }\n  }\n\n  isWin = ({ black, white, size }) => {\n    let title = ''\n    let content\n    if (black + white === size) {\n      if (black > white) {\n        title = 'Victory'\n        content = 'black wins'\n      } else if (black < white) {\n        title = 'Victory'\n        content = 'white wins'\n      } else {\n        title = 'Peace'\n        content = 'Draw'\n      }\n    } else if (!black || !white) {\n      if (black) {\n        title = 'Victory'\n        content = 'black wins'\n      } else if (white) {\n        title = 'Victory'\n        content = 'white wins'\n      }\n    }\n\n    if (title && content) {\n      Modal.info({ title, content })\n    }\n  }\n\n  render() {\n    const { checkerboard, history, step, size } = this.state\n    const { isMobile } = this.props\n    const { black, white } = this.getScore()\n    const disablePass =\n      black + white === size ||\n      (history.length && Object.keys(history[history.length - 1]).length === 0)\n    this.isWin({ black, white, size })\n    return (\n      <div className=\"reversi-wrapper\">\n        <div className=\"reversi-top\">\n          <div\n            className={`top black ${isMobile ? '' : 'bigger'} ${\n              step % 2 === 1 ? '' : 'current'\n            }`}\n          >\n            {black}\n          </div>\n          <div\n            className={`top white ${isMobile ? '' : 'bigger'} ${\n              step % 2 === 1 ? 'current' : ''\n            }`}\n          >\n            {white}\n          </div>\n        </div>\n        <div className={isMobile ? 'checkerboard' : 'checkerboard bigger'}>\n          <table>\n            <tbody>{checkerboard.map(this.renderRow)}</tbody>\n          </table>\n        </div>\n        <div className=\"reversi-bottom\">\n          <Button\n            type=\"primary\"\n            disabled={history.length === 0}\n            onClick={this.reset}\n          >\n            Reset\n          </Button>\n          <Button\n            type=\"primary\"\n            disabled={disablePass ? true : false}\n            onClick={this.pass}\n          >\n            Pass\n          </Button>\n          <Button\n            type=\"primary\"\n            disabled={history.length === 0}\n            onClick={this.retract}\n          >\n            Retract\n          </Button>\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default Utils.connect({\n  component: Reversi,\n  mapStateToProps: state => ({\n    isMobile: state.common.isMobile\n  })\n})\n"],"sourceRoot":""}