{"version":3,"sources":["webpack:///./src/pages/Tetris/constant.tsx","webpack:///./src/pages/Tetris/tools.tsx","webpack:///./src/pages/Tetris/index.tsx"],"names":["keyCode","left","up","right","down","space","block","L","J","O","T","Z","S","I","scores","blockMap","couldMoveLeftOrRight","rx","y","playboard","length","blockList","couldMove","forEach","row","dy","every","item","dx","push","x","ox","oy","nx","ny","couldMoveFun","_","width","bottomBlockList","i","l","next","b","getCurrPosition","cBlock","screen","rotate","moveTo","clone","max","center","Math","floor","index","cm","curr","blocks","Object","keys","props","transform","clearBtnInterval","btnInterval","clearInterval","interval","resetGame","e","calculateScreen","column","state","style","getSize","random","intervalTime","score","pause","gameover","touchDown","pressed","setState","doMovePlayboard","h","setTimeout","visibilitychange","document","visibilityState","togglePause","isGameOver","clearRow","map","clearedList","splice","unshift","Array","fill","keyup","keydown","code","doMove","touchStart","cx","my","lp","lx","rp","dp","newInterval","reset","r","goToBottom","movePlayboard","doTimeout","setInterval","p","couldGoDown","isRowNeedClear","couldCalculate","vibrate","c","result","j","renderPlayboard","className","key","cName","isMobile","scale","paddingTop","s","getDirectionBtn","direction","onTouchStart","handle","addEventListener","componentWillUnmount","this","removeEventListener","componentDidUpdate","nextProps","render","btnStyle","type","onClick","Component","connect","component","Tetris","mapStateToProps","common","contentHeight"],"mappings":"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","file":"js/14.6e17bac42eb4b3de6e9f.bundle.js","sourcesContent":["export default {\n  keyCode: {\n    left: 37,\n    up: 38,\n    right: 39,\n    down: 40,\n    space: 32\n  },\n  block: {\n    L: [\n      [\n        [0, 0, 1],\n        [1, 1, 1]\n      ],\n      [\n        [1, 1],\n        [0, 1],\n        [0, 1]\n      ],\n      [\n        [1, 1, 1],\n        [1, 0, 0]\n      ],\n      [\n        [1, 0],\n        [1, 0],\n        [1, 1]\n      ]\n    ],\n    J: [\n      [\n        [1, 0, 0],\n        [1, 1, 1]\n      ],\n      [\n        [1, 1],\n        [1, 0],\n        [1, 0]\n      ],\n      [\n        [1, 1, 1],\n        [0, 0, 1]\n      ],\n      [\n        [0, 1],\n        [0, 1],\n        [1, 1]\n      ]\n    ],\n    O: [\n      [\n        [1, 1],\n        [1, 1]\n      ],\n      [\n        [1, 1],\n        [1, 1]\n      ],\n      [\n        [1, 1],\n        [1, 1]\n      ],\n      [\n        [1, 1],\n        [1, 1]\n      ]\n    ],\n    T: [\n      [\n        [0, 1, 0],\n        [1, 1, 1]\n      ],\n      [\n        [0, 1],\n        [1, 1],\n        [0, 1]\n      ],\n      [\n        [1, 1, 1],\n        [0, 1, 0]\n      ],\n      [\n        [1, 0],\n        [1, 1],\n        [1, 0]\n      ]\n    ],\n    Z: [\n      [\n        [1, 1, 0],\n        [0, 1, 1]\n      ],\n      [\n        [0, 1],\n        [1, 1],\n        [1, 0]\n      ],\n      [\n        [1, 1, 0],\n        [0, 1, 1]\n      ],\n      [\n        [0, 1],\n        [1, 1],\n        [1, 0]\n      ]\n    ],\n    S: [\n      [\n        [0, 1, 1],\n        [1, 1, 0]\n      ],\n      [\n        [1, 0],\n        [1, 1],\n        [0, 1]\n      ],\n      [\n        [0, 1, 1],\n        [1, 1, 0]\n      ],\n      [\n        [1, 0],\n        [1, 1],\n        [0, 1]\n      ]\n    ],\n    I: [\n      [[1, 1, 1, 1]],\n      [[1], [1], [1], [1]],\n      [[1, 1, 1, 1]],\n      [[1], [1], [1], [1]]\n    ]\n  },\n  scores: [1, 3, 5, 10]\n}\n","import Utils from '@utils'\nimport Constant from './constant'\nconst { block: blockMap, keyCode } = Constant\n\nconst couldMoveLeftOrRight = ({ width, block, rx, y, playboard, length }) => {\n  const blockList: any[] = []\n  let couldMove = true\n  block.forEach((row, dy) => {\n    row.every((item, dx) => {\n      if (item) {\n        blockList.push({ x: dx, y: dy })\n      }\n      return true\n    })\n  })\n  blockList.every(item => {\n    const { x: ox, y: oy } = item\n    const nx = ox + rx\n    const ny = y + oy - length\n    if (ny >= 0 && ny < 20 && playboard[ny][nx]) {\n      couldMove = false\n    }\n    return couldMove\n  })\n  return couldMove\n}\n\nconst couldMoveFun = {\n  [keyCode.up]: ({ width, block, rx, y, playboard, length }) => {\n    let couldMove = true\n    block.every((row, dy) => {\n      row.every((_, dx) => {\n        const nx = dx + rx\n        const ny = y + dy - length\n        if (ny >= 0 && ny < 20 && playboard[ny][nx]) {\n          couldMove = false\n        }\n        return couldMove\n      })\n      return couldMove\n    })\n    return couldMove\n  },\n  [keyCode.down]: ({ width, block, rx, y, playboard, length }) => {\n    if (y === 21) {\n      return false\n    }\n    let couldMove = true\n    const bottomBlockList: any[] = []\n    for (let i = 0; i < width; i++) {\n      let l = block.length - 1\n      let next = true\n      while (l >= 0 && next) {\n        if (block[l][i]) {\n          bottomBlockList.push({ x: i, y: l })\n          next = false\n        }\n        l--\n      }\n    }\n    bottomBlockList.every(b => {\n      const { x: ox, y: oy } = b\n      const nx = ox + rx\n      const ny = y + oy - length\n      if (ny >= 0 && ny < 20 && playboard[ny][nx]) {\n        couldMove = false\n      }\n      return couldMove\n    })\n    return couldMove\n  },\n  [keyCode.left]: couldMoveLeftOrRight,\n  [keyCode.right]: couldMoveLeftOrRight\n}\n\nexport default {\n  getCurrPosition: ({ x, y, cBlock, screen, rotate, moveTo }) => {\n    const playboard = Utils.clone(screen)\n    const block: number[][] = blockMap[cBlock][rotate]\n    const width = block[0].length\n    const min = 0\n    const max = 10 - width\n    const center = Math.floor((10 - width) / 2)\n    let length = block.length\n    let index = y\n    let rx = center + x\n    if (rx < min) {\n      rx = min\n      x = -center\n    }\n    if (rx > max) {\n      rx = max\n      x = width % 2 === 1 ? center + 1 : center\n    }\n    const cm = couldMoveFun[moveTo]({ width, block, rx, y, playboard, length })\n\n    if (cm) {\n      while (index > 0 && length > 0) {\n        let curr = --index\n        const row = block[length - 1]\n        curr = curr > 20 ? 20 : curr\n        for (let i = 0; i < 10; i++) {\n          if (i < row.length) {\n            const b = playboard[curr][rx + i]\n            if (!b) {\n              playboard[curr][rx + i] = row[i]\n            }\n          }\n        }\n        length--\n      }\n    }\n\n    return { playboard, x, screen, couldMove: cm }\n  }\n}\n","import Utils from '@utils'\nimport { Button } from 'antd'\nimport React from 'react'\nimport Constant from './constant'\nimport './index.less'\nimport Tools from './tools'\nconst { block: blockMap, keyCode, scores } = Constant\n\nconst blocks = Object.keys(blockMap)\n\ninterface IStates {\n  row: number;\n  column: number;\n  screen: number[][];\n  playboard: number[][];\n  cBlock: string;\n  interval?: number;\n  y: number;\n  x: number;\n  h: number;\n  rotate: number;\n  intervalTime: number;\n  couldMove: boolean;\n  pause: boolean;\n  gameover: boolean;\n  touchDown: boolean;\n  score: number;\n  pressed: boolean;\n  style: any;\n}\n\ninterface IProps {\n  isMobile: boolean;\n  h: number;\n}\n\nclass Tetris extends React.Component<IProps, IStates> {\n  interval\n\n  btnInterval\n\n  transform = Utils.transform\n\n  constructor(props) {\n    super(props)\n    document.addEventListener('keyup', this.keyup)\n    document.addEventListener('keydown', this.keydown)\n    document.addEventListener('touchend', this.clearBtnInterval)\n    document.addEventListener('visibilitychange', this.visibilitychange)\n    this.resetGame()\n  }\n\n  componentWillUnmount() {\n    this.clearInterval()\n    this.clearBtnInterval()\n    document.removeEventListener('keyup', this.keyup)\n    document.removeEventListener('keydown', this.keydown)\n    document.removeEventListener('touchend', this.clearBtnInterval)\n    document.removeEventListener('visibilitychange', this.visibilitychange)\n  }\n\n  componentDidUpdate(nextProps) {\n    const { isMobile } = this.props\n    if (nextProps.isMobile !== isMobile) {\n      this.setState({ style: this.getSize(nextProps) })\n    }\n  }\n\n  clearBtnInterval = () => {\n    if (this.btnInterval) {\n      clearInterval(this.btnInterval)\n    }\n  }\n\n  clearInterval = () => {\n    if (this.interval) {\n      clearInterval(this.interval)\n    }\n  }\n\n  resetGame = (e?) => {\n    this.clearInterval()\n    const row = 20\n    const column = 10\n    const screen = this.calculateScreen({ row, column })\n    const state = {\n      row,\n      column,\n      screen,\n      playboard: screen,\n      style: this.getSize(this.props),\n      cBlock: blocks[Utils.random(0, blocks.length)],\n      x: 0,\n      y: 0,\n      intervalTime: 800,\n      score: 0,\n      rotate: Utils.random(0, 4),\n      pause: false,\n      gameover: false,\n      touchDown: false,\n      pressed: false\n    }\n    if (e) {\n      this.setState(state, () => this.doMovePlayboard(true))\n    } else {\n      this.state = { ...state, couldMove: false, h: 0 }\n      setTimeout(() => this.doMovePlayboard(true), 0)\n    }\n  }\n\n  visibilitychange = () => {\n    if (\n      (!this.state.pause && document.visibilityState === 'hidden') ||\n      (this.state.pause && document.visibilityState !== 'hidden')\n    ) {\n      this.togglePause()\n    }\n  }\n\n  isGameOver = () => {\n    const { x, y, cBlock, screen, rotate } = this.state\n    const { couldMove } = Tools.getCurrPosition({\n      x,\n      y: y + 1,\n      cBlock,\n      screen,\n      rotate,\n      moveTo: keyCode.down\n    })\n    return !(couldMove || blockMap[cBlock][rotate].length < y - 1)\n  }\n\n  clearRow = playboard => {\n    const screen = Utils.clone(playboard).map(row =>\n      row.map(item => (item ? 2 : 0))\n    )\n    const clearedList: number[] = []\n    playboard.forEach((row, i) => {\n      if (row.every(item => item)) {\n        screen.splice(i, 1)\n        screen.unshift(new Array(10).fill(0))\n        clearedList.push(i)\n      }\n    })\n    return { screen, clearedList }\n  }\n\n  keyup = () => {\n    this.clearBtnInterval()\n    this.setState({ pressed: false })\n  }\n\n  keydown = e => {\n    if (!this.state.pressed) {\n      const { keyCode: code } = e\n      if (code === keyCode.space) {\n        this.doMove(code)\n      } else {\n        this.touchStart(code)\n      }\n    }\n  }\n\n  doMove = code => {\n    const {\n      x: cx,\n      y: my,\n      screen,\n      cBlock,\n      row,\n      rotate,\n      pause,\n      gameover\n    } = this.state\n    if (pause || gameover) {\n      return\n    }\n    let playboard = [[]]\n    let x = cx\n    switch (code) {\n      case keyCode.left:\n        x = cx - 1\n        const { playboard: lp, x: lx, couldMove: lc } = Tools.getCurrPosition({\n          x,\n          y: my ? my : 20,\n          cBlock,\n          screen,\n          rotate,\n          moveTo: keyCode.left\n        })\n        if (lc) {\n          x = lx\n          playboard = lp\n          this.setState({ playboard, x, pressed: true })\n        }\n        return\n      case keyCode.right:\n        x = cx + 1\n        const { playboard: rp, x: rx, couldMove: rc } = Tools.getCurrPosition({\n          x,\n          y: my ? my : 20,\n          cBlock,\n          screen,\n          rotate,\n          moveTo: keyCode.right\n        })\n        if (rc) {\n          x = rx\n          playboard = rp\n          this.setState({ playboard, x, pressed: true })\n        }\n        return\n      case keyCode.down:\n        if (my > row) {\n          return\n        }\n        const { couldMove, playboard: dp } = Tools.getCurrPosition({\n          x,\n          y: my + 1,\n          cBlock,\n          screen,\n          rotate,\n          moveTo: keyCode.down\n        })\n        if (couldMove) {\n          this.newInterval()\n          this.setState({ playboard: dp, y: my + 1, pressed: true })\n        } else {\n          this.reset()\n        }\n        return\n      case keyCode.up:\n        let r = rotate\n        r = r >= 3 ? 0 : r + 1\n        const { playboard: up, couldMove: uc } = Tools.getCurrPosition({\n          x: cx,\n          y: my ? my : 20,\n          cBlock,\n          screen,\n          rotate: r,\n          moveTo: keyCode.up\n        })\n        if (uc) {\n          playboard = up\n          this.setState({ playboard, rotate: r, pressed: true })\n        }\n        return\n      case keyCode.space:\n        this.goToBottom()\n        break\n      default:\n    }\n  }\n\n  newInterval = (next?) => {\n    this.clearInterval()\n    if (this.isGameOver()) {\n      this.setState({ gameover: true })\n    } else {\n      this.doMovePlayboard(next)\n    }\n  }\n\n  doMovePlayboard = (next?) => {\n    if (next) {\n      this.movePlayboard(this.state)\n    }\n    this.doTimeout()\n  }\n\n  doTimeout = () => {\n    this.interval = setInterval(() => {\n      this.movePlayboard(this.state)\n    }, this.state.intervalTime)\n  }\n\n  movePlayboard = ({ x, y }) => {\n    const { screen, cBlock, rotate } = this.state\n    const { playboard, couldMove } = Tools.getCurrPosition({\n      x,\n      y: y + 1,\n      cBlock,\n      screen,\n      rotate,\n      moveTo: keyCode.down\n    })\n    if (couldMove) {\n      this.setState({ playboard, y: y + 1 })\n    } else {\n      this.reset()\n    }\n  }\n\n  goToBottom = () => {\n    const { x, cBlock, rotate, screen, gameover, pause } = this.state\n    if (gameover || pause) {\n      return\n    }\n    let { y, playboard: p } = this.state\n    let couldGoDown = true\n    while (couldGoDown) {\n      const { couldMove, playboard } = Tools.getCurrPosition({\n        x,\n        y: y + 1,\n        cBlock,\n        screen,\n        rotate,\n        moveTo: keyCode.down\n      })\n      couldGoDown = couldMove\n      if (couldMove) {\n        y++\n        p = playboard\n      } else {\n        this.setState(\n          { playboard: p, y, touchDown: true, pressed: true },\n          this.isRowNeedClear\n        )\n      }\n    }\n    setTimeout(() => this.setState({ touchDown: false }), 100)\n  }\n\n  isRowNeedClear = (couldCalculate?) => {\n    this.clearInterval()\n    const { playboard, score } = this.state\n    const { screen, clearedList } = this.clearRow(playboard)\n    const { length } = clearedList\n    if (length) {\n      const state = couldCalculate\n        ? { screen, score: score + scores[length - 1] }\n        : { screen, score }\n      clearedList.forEach(index => (playboard[index] = new Array(10).fill(3)))\n      this.setState({ screen: playboard })\n      this.vibrate(100)\n      setTimeout(() => {\n        this.setState(state, () => this.newInterval(true))\n      }, 300)\n    } else {\n      this.setState({ screen }, () => this.newInterval(true))\n    }\n  }\n\n  reset = () => {\n    this.vibrate(100)\n    this.setState(\n      {\n        cBlock: blocks[Utils.random(0, blocks.length)],\n        y: 0,\n        x: 0,\n        rotate: Utils.random(0, 4)\n      },\n      () => this.isRowNeedClear(true)\n    )\n  }\n\n  // state\n  // 0: empty, 1: block 2: full 3: cleared\n  calculateScreen = ({ row: r, column: c }) => {\n    const result: number[][] = []\n    for (let i = 0; i < r; i++) {\n      const row: number[] = []\n      for (let j = 0; j < c; j++) {\n        row.push(0)\n      }\n      result.push(row)\n    }\n    return result\n  }\n\n  renderPlayboard = () =>\n    this.state.playboard\n      ? this.state.playboard.map((r, i) => (\n        <div className=\"row\" key={i}>\n          {r.map((c, j) => {\n            let cName = ''\n            switch (c) {\n              case 1:\n                cName = 'block'\n                break\n              case 2:\n                cName = 'full'\n                break\n              case 3:\n                cName = 'cleared'\n                break\n            }\n            return <div key={j} className={`item ${cName}`} />\n          })}\n        </div>\n      ))\n      : null\n\n  togglePause = () => {\n    const { pause } = this.state\n    if (!pause && this.interval) {\n      this.clearInterval()\n      this.clearBtnInterval()\n    } else {\n      this.newInterval()\n    }\n    this.setState({ pause: !pause })\n  }\n\n  touchStart = code => {\n    this.clearBtnInterval()\n    const interval = code === keyCode.down ? 50 : 100\n    this.doMove(code)\n    if (code !== keyCode.up) {\n      this.btnInterval = setInterval(() => this.doMove(code), interval)\n    }\n  }\n\n  getSize = props => {\n    if (!this.props.isMobile) {\n      return {}\n    }\n    const { h } = props\n    const scale = h / 960\n    const filling = h - 480\n    return {\n      paddingTop: (filling - 100) * 0.6,\n      [this.transform]: `scale(${scale + 0.3})`\n    }\n  }\n\n  vibrate = s =>\n    false && this.props.isMobile && navigator.vibrate\n      ? navigator.vibrate(s)\n      : null\n\n  getDirectionBtn = direction => (\n    <div\n      onTouchStart={Utils.handle(\n        direction === 'up' ? this.doMove : this.touchStart,\n        keyCode[direction]\n      )}\n      className={`anticon anticon-ts-app icon-${direction}-circle`}\n    />\n  )\n\n  render() {\n    const { isMobile } = this.props\n    const { pause, gameover, touchDown, score, style } = this.state\n    const btnStyle = { [this.transform]: style[this.transform] }\n    return (\n      <div className={`tetris-wrapper ${isMobile ? 'mobile' : ''}`}>\n        <div className=\"tetris-screen-wrapper\" style={style}>\n          <div className=\"score\">{score}</div>\n          <div className={`tetris-screen ${touchDown ? 'touch-buttom' : ''}`}>\n            {this.renderPlayboard()}\n            {gameover ? (\n              <div className=\"game-over\">\n                <Button type=\"primary\" onClick={this.resetGame}>\n                  Reset\n                </Button>\n              </div>\n            ) : null}\n          </div>\n        </div>\n        <div className=\"btn-wrapper\">\n          <div className=\"functional-btn\" style={btnStyle}>\n            <div\n              onTouchStart={this.togglePause}\n              className={`anticon anticon-ts-app icon-${\n                pause ? 'play' : 'pause'\n              }`}\n            />\n            <div\n              onTouchStart={this.goToBottom}\n              className={`anticon anticon-ts-app icon-down`}\n            />\n          </div>\n          <div className=\"direction\" style={btnStyle}>\n            {this.getDirectionBtn('up')}\n            <div className=\"middle\">\n              {this.getDirectionBtn('left')}\n              {this.getDirectionBtn('right')}\n            </div>\n            {this.getDirectionBtn('down')}\n          </div>\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default Utils.connect({\n  component: Tetris,\n  mapStateToProps: state => ({\n    isMobile: state.common.isMobile,\n    h: state.common.contentHeight\n  })\n})\n"],"sourceRoot":""}