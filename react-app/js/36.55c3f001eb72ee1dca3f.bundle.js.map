{"version":3,"sources":["webpack:///./src/pages/2048/tools.tsx"],"names":["getValue","x","y","p","res","v","index","some","i","same","moveRight","changed","max","curr","occupied","currV","currIndex","nextV","nextIndex","merged","push","id","Math","random","moveLeft","min","moveDown","moveUp"],"mappings":"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","file":"js/36.55c3f001eb72ee1dca3f.bundle.js","sourcesContent":["interface IPiece {\n  x: number;\n  y: number;\n  v: number;\n  merged?: boolean;\n  id: number;\n}\n\nconst getValue = (x, y, p) => {\n  let res = { v: 0, index: -1 }\n  p.some((i, index) => {\n    const same = i.x === x && i.y === y\n    if (same) {\n      res = { v: i.v, index }\n    }\n    return same\n  })\n  return res\n}\n\nexport default {\n  moveRight: (p: IPiece[]) => {\n    let changed = false\n    for (let y = 0; y < 4; y++) {\n      let max = 3\n      for (let x = 2; x >= 0; x--) {\n        let curr = -1\n        const isOccupied = p.some((i, index) => {\n          const occupied = i.x === x + 1 && i.y === y\n          if (i.x === x && i.y === y) {\n            curr = index\n          }\n          if (occupied) {\n            max--\n          }\n          return occupied\n        })\n        if (!isOccupied && curr >= 0) {\n          p[curr].x = max\n          changed = true\n          max--\n        }\n      }\n      for (let x = 2; x >= 0; x--) {\n        const { v: currV, index: currIndex } = getValue(x, y, p)\n        const { v: nextV, index: nextIndex } = getValue(x + 1, y, p)\n        if (currV && nextV && currV === nextV) {\n          p[currIndex].x = x + 1\n          p[currIndex].merged = true\n          p[nextIndex].merged = true\n          for (let v = x - 1; v >= 0; v--) {\n            const { index: i } = getValue(v, y, p)\n            if (i >= 0) {\n              p[i].x = p[i].x < 3 ? p[i].x + 1 : p[i].x\n            }\n          }\n          p.push({ x: x + 1, y, v: currV * 2, id: Math.random() })\n          changed = true\n        }\n      }\n    }\n    return { p, changed }\n  },\n\n  moveLeft: (p: IPiece[]) => {\n    let changed = false\n    for (let y = 0; y < 4; y++) {\n      let min = 0\n      for (let x = 1; x < 4; x++) {\n        let curr = -1\n        const isOccupied = p.some((i, index) => {\n          const occupied = i.x === x - 1 && i.y === y\n          if (i.x === x && i.y === y) {\n            curr = index\n          }\n          if (occupied) {\n            min++\n          }\n          return occupied\n        })\n        if (!isOccupied && curr >= 0) {\n          p[curr].x = min\n          changed = true\n          min++\n        }\n      }\n      for (let x = 1; x < 4; x++) {\n        const { v: currV, index: currIndex } = getValue(x, y, p)\n        const { v: nextV, index: nextIndex } = getValue(x - 1, y, p)\n        if (currV && nextV && currV === nextV) {\n          p[currIndex].x = x - 1\n          p[currIndex].merged = true\n          p[nextIndex].merged = true\n          for (let v = x; v <= 3; v++) {\n            const { index: i } = getValue(v, y, p)\n            if (i >= 0) {\n              p[i].x = p[i].x > 0 ? p[i].x - 1 : p[i].x\n            }\n          }\n          p.push({ x: x - 1, y, v: currV * 2, id: Math.random() })\n          changed = true\n        }\n      }\n    }\n    return { p, changed }\n  },\n\n  moveDown: (p: IPiece[]) => {\n    let changed = false\n    for (let x = 0; x < 4; x++) {\n      let max = 3\n      for (let y = 2; y >= 0; y--) {\n        let curr = -1\n        const isOccupied = p.some((i, index) => {\n          const occupied = i.x === x && i.y === y + 1\n          if (i.x === x && i.y === y) {\n            curr = index\n          }\n          if (occupied) {\n            max--\n          }\n          return occupied\n        })\n        if (!isOccupied && curr >= 0) {\n          p[curr].y = max\n          changed = true\n          max--\n        }\n      }\n      for (let y = 2; y >= 0; y--) {\n        const { v: currV, index: currIndex } = getValue(x, y, p)\n        const { v: nextV, index: nextIndex } = getValue(x, y + 1, p)\n        if (currV && nextV && currV === nextV) {\n          p[currIndex].y = y + 1\n          p[currIndex].merged = true\n          p[nextIndex].merged = true\n          for (let v = y - 1; v >= 0; v--) {\n            const { index: i } = getValue(x, v, p)\n            if (i >= 0) {\n              p[i].y = p[i].y < 3 ? p[i].y + 1 : p[i].y\n            }\n          }\n          p.push({ x, y: y + 1, v: currV * 2, id: Math.random() })\n          changed = true\n        }\n      }\n    }\n    return { p, changed }\n  },\n\n  moveUp: (p: IPiece[]) => {\n    let changed = false\n    for (let x = 0; x < 4; x++) {\n      let min = 0\n      for (let y = 1; y < 4; y++) {\n        let curr = -1\n        const isOccupied = p.some((i, index) => {\n          const occupied = i.x === x && i.y === y - 1\n          if (i.x === x && i.y === y) {\n            curr = index\n          }\n          if (occupied) {\n            min++\n          }\n          return occupied\n        })\n        if (!isOccupied && curr >= 0) {\n          p[curr].y = min\n          changed = true\n          min++\n        }\n      }\n      for (let y = 1; y < 4; y++) {\n        const { v: currV, index: currIndex } = getValue(x, y, p)\n        const { v: nextV, index: nextIndex } = getValue(x, y - 1, p)\n        if (currV && nextV && currV === nextV) {\n          p[currIndex].y = y - 1\n          p[currIndex].merged = true\n          p[nextIndex].merged = true\n          for (let v = y; v <= 3; v++) {\n            const { index: i } = getValue(x, v, p)\n            if (i >= 0) {\n              p[i].y = p[i].y > 0 ? p[i].y - 1 : p[i].y\n            }\n          }\n          p.push({ x, y: y - 1, v: currV * 2, id: Math.random() })\n          changed = true\n        }\n      }\n    }\n    return { p, changed }\n  }\n}\n"],"sourceRoot":""}