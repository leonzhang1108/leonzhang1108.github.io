{"version":3,"sources":["webpack:///./src/pages/Reversi/tools.tsx"],"names":["directionMap","statusMap","check","x","y","checkerboard","player","direction","dx","dy","result","click","couldClick","some","clickToCover","reverse","forEach","cx","cy","push","c","r"],"mappings":"2FAAA,WAAMA,EAAe,CACnB,CAAC,EAAG,GACJ,CAAC,GAAI,GACL,EAAE,EAAG,GACL,CAAC,EAAG,GACJ,EAAE,GAAI,GACN,EAAE,EAAG,GACL,CAAC,GAAI,GACL,CAAC,EAAG,IAGAC,EACG,EADHA,EAEG,EAFHA,EAGG,EAUHC,EAAQ,SAAC,G,IAAEC,EAAC,IAAEC,EAAC,IAAEC,EAAY,eAAEC,EAAM,SAAEC,EAAS,YAC7CC,EAAUD,EAAS,GAAfE,EAAMF,EAAS,GACtBG,EAAS,EACTC,EAAQL,EAASL,EAAkBA,EAGvC,IAFAE,GAAKK,EACLJ,GAAKK,EACEN,GAAK,GAAKA,GAbD,GAamBC,GAAK,GAAKA,GAb7B,GAcVC,EAAaF,GAAGC,KAAOH,GAA8B,IAAXS,GADa,CAI3D,GAAIL,EAAaF,GAAGC,KAAOO,EACzBD,IACAC,EAASL,EAA2BL,EAAlBA,OAElB,GAAe,IAAXS,EACF,MAGJP,GAAKK,EACLJ,GAAKK,EAEP,OAAkB,IAAXC,GAGM,WACbE,WAAY,SAAC,G,IAAET,EAAC,IAAEC,EAAC,IAAEC,EAAY,eAAEC,EAAM,SACvC,OAAAN,EAAaa,MAAK,SAAAN,GAChB,OAAAL,EAAM,CAAEC,EAAC,EAAEC,EAAC,EAAEC,aAAY,EAAEC,OAAM,EAAEC,UAAS,QAGjDO,aAAc,SAAC,G,IAAEX,EAAC,IAAEC,EAAC,IAAEC,EAAY,eAAEC,EAAM,SACnCS,EAAsB,GAuB5B,OAtBAf,EAAagB,SAAQ,SAAAT,GACZ,IAAAC,EAAUD,EAAS,GAAfE,EAAMF,EAAS,GACtBU,EAAKd,EACLe,EAAKd,EAGT,GAFAa,GAAMT,EACNU,GAAMT,EACFP,EAAM,CAAEC,EAAC,EAAEC,EAAC,EAAEC,aAAY,EAAEC,OAAM,EAAEC,UAAS,IAC/C,KAAOU,GAAM,GAAKA,GA9CR,GA8C2BC,GAAM,GAAKA,GA9CtC,GAgDNb,EAAaY,GAAIC,KAAQjB,GACzBI,EAAaY,GAAIC,MACdZ,EAASL,EAAkBA,IAIhCI,EAAaY,GAAIC,GAAMZ,EAASL,EAAkBA,EAClDc,EAAQI,KAAK,CAAEhB,EAAGc,EAAIb,EAAGc,IACzBD,GAAMT,EACNU,GAAMT,KAIL,CAAEW,EAAGf,EAAcgB,EAAGN","file":"js/43.1f500e270d95f2a9eec0.bundle.js","sourcesContent":["const directionMap = [\n  [0, 1],\n  [0, -1],\n  [-1, 0],\n  [1, 0],\n  [-1, -1],\n  [-1, 1],\n  [1, -1],\n  [1, 1]\n]\n\nconst statusMap = {\n  empty: 0,\n  black: 1,\n  white: 2\n}\n\nconst borderMax = 7\n\ninterface IReverse {\n  x: number;\n  y: number;\n}\n\nconst check = ({ x, y, checkerboard, player, direction }) => {\n  const [dx, dy] = direction\n  let result = 0\n  let click = player ? statusMap.black : statusMap.white\n  x += dx\n  y += dy\n  while (x >= 0 && x <= borderMax && y >= 0 && y <= borderMax) {\n    if (checkerboard[x][y] === statusMap.empty || result === 2) {\n      break\n    }\n    if (checkerboard[x][y] === click) {\n      result++\n      click = !player ? statusMap.black : statusMap.white\n    } else {\n      if (result !== 1) {\n        break\n      }\n    }\n    x += dx\n    y += dy\n  }\n  return result === 2\n}\n\nexport default {\n  couldClick: ({ x, y, checkerboard, player }) =>\n    directionMap.some(direction =>\n      check({ x, y, checkerboard, player, direction })\n    ),\n\n  clickToCover: ({ x, y, checkerboard, player }) => {\n    const reverse: IReverse[] = []\n    directionMap.forEach(direction => {\n      const [dx, dy] = direction\n      let cx = x\n      let cy = y\n      cx += dx\n      cy += dy\n      if (check({ x, y, checkerboard, player, direction })) {\n        while (cx >= 0 && cx <= borderMax && cy >= 0 && cy <= borderMax) {\n          if (\n            checkerboard[cx][cy] === statusMap.empty ||\n            checkerboard[cx][cy] ===\n              (player ? statusMap.white : statusMap.black)\n          ) {\n            break\n          }\n          checkerboard[cx][cy] = player ? statusMap.white : statusMap.black\n          reverse.push({ x: cx, y: cy })\n          cx += dx\n          cy += dy\n        }\n      }\n    })\n    return { c: checkerboard, r: reverse }\n  }\n}\n"],"sourceRoot":""}