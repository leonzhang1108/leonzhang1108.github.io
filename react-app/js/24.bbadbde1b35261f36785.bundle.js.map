{"version":3,"sources":["webpack:///./src/pages/InfiniteList/index.tsx"],"names":["props","randomBoolean","Math","random","calculateOffset","index","list","state","length","offsetTop","height","setState","doCalculate","startIndex","offset","innerOffset","endIndex","findEndIndex","visibleData","slice","top","findTopByIndex","findStartIndex","visibleHeight","wrapper","clientHeight","calculateEndIndex","scrollHandler","e","interval","target","scrollTop","val","obj","push","contentHeight","reduce","p","c","componentDidMount","this","render","className","onScroll","ref","style","transform","map","item","i","lineHeight","key","Component"],"mappings":"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","file":"js/24.bbadbde1b35261f36785.bundle.js","sourcesContent":["import React from 'react'\nimport './index.less'\n\ninterface IState {\n  list: any[];\n  // 可视区域top\n  top: number;\n  // 数据总高度\n  contentHeight: number;\n  // 可见高度\n  visibleHeight: number;\n  // 可见列表\n  visibleData: any[];\n  // 上下预加载个数\n  offset: number;\n  // 间隔\n  interval: number;\n}\n\nclass InfiniteList extends React.Component<{}, IState> {\n  wrapper\n\n  randomBoolean = () => Math.random() - 0.5 > 0\n\n  constructor(props) {\n    super(props)\n    // init data\n    const list: any[] = []\n\n    for (let val = 0; val < 777; val++) {\n      // randam height\n      const height = this.randomBoolean() ? 60 : 30\n\n      const obj: any = { val, height }\n\n      if (!val) {\n        obj.offsetTop = height\n      }\n\n      list.push(obj)\n    }\n\n    const contentHeight = list.reduce((p, c) => p + c.height, 0)\n\n    this.state = {\n      // 可视区域top\n      top: 0,\n      // 可见高度\n      visibleHeight: 0,\n      // 可见列表\n      visibleData: [],\n      // 上下预加载个数\n      offset: 10,\n      // 间隔\n      interval: 2,\n      // 总列表，及offsetTop\n      list,\n      // 数据总高度\n      contentHeight\n    }\n  }\n\n  componentDidMount() {\n    // init height & visible data\n    const visibleHeight = this.wrapper.clientHeight\n\n    this.setState({\n      visibleHeight,\n      ...this.doCalculate(0)\n    })\n  }\n\n  calculateOffset = index => {\n    const { list } = this.state\n\n    if (index === list.length) {\n      return\n    }\n\n    // 取缓存\n    if (list[index].offsetTop) {\n      return list[index].offsetTop\n    }\n\n    let offsetTop = list[index].height\n\n    offsetTop += this.calculateOffset(index - 1)\n\n    // 添加缓存\n    list[index] = {\n      ...list[index],\n      offsetTop\n    }\n\n    this.setState({ list })\n\n    return offsetTop\n  }\n\n  doCalculate = startIndex => {\n    const { list, offset } = this.state\n\n    const innerOffset = (startIndex = startIndex - offset)\n\n    startIndex = startIndex > 0 ? startIndex : 0\n\n    let endIndex = this.findEndIndex(startIndex) + offset * 2 + 1\n\n    endIndex = innerOffset < 0 ? endIndex + innerOffset : endIndex\n\n    endIndex = endIndex > list.length ? list.length : endIndex\n\n    const visibleData = list.slice(startIndex, endIndex)\n\n    const top = this.findTopByIndex(startIndex)\n\n    return { visibleData, top }\n  }\n\n  findTopByIndex = index => (index ? this.state.list[index - 1].offsetTop : 0)\n\n  findStartIndex = top => {\n    const { list } = this.state\n\n    let index = 0\n\n    while (index < list.length) {\n      if (!list[index].offsetTop) {\n        this.calculateOffset(index)\n      }\n\n      if (top < list[index].offsetTop) {\n        break\n      }\n\n      index++\n    }\n\n    return index\n  }\n\n  findEndIndex = startIndex => {\n    let { visibleHeight } = this.state\n    const { list } = this.state\n\n    // 取缓存\n    if (list[startIndex].endIndex) {\n      return list[startIndex].endIndex\n    }\n\n    visibleHeight = visibleHeight || this.wrapper.clientHeight\n\n    // 计算endIndex\n    const endIndex = this.calculateEndIndex(visibleHeight, startIndex)\n\n    // 加入缓存\n    list[startIndex].endIndex = endIndex\n\n    this.setState({ list })\n\n    return endIndex\n  }\n\n  calculateEndIndex = (visibleHeight, index = 0) => {\n    const { list } = this.state\n\n    while (visibleHeight > 0) {\n      const i = index + 1\n      if (i !== list.length) {\n        visibleHeight -= list[++index].height\n      } else {\n        break\n      }\n    }\n\n    return index\n  }\n\n  scrollHandler = e => {\n    const { interval } = this.state\n\n    const startIndex = this.findStartIndex(e.target.scrollTop)\n\n    if (startIndex % interval === 0) {\n      this.setState(this.doCalculate(startIndex))\n    }\n  }\n\n  render() {\n    const { visibleData, contentHeight, top } = this.state\n\n    return (\n      <div\n        className=\"infinite-list-wrapper\"\n        onScroll={this.scrollHandler}\n        ref={ref => {\n          this.wrapper = ref\n        }}\n      >\n        <div\n          className=\"infinite-list-ghost\"\n          style={{ height: contentHeight }}\n        />\n        <div\n          className=\"infinite-list\"\n          style={{ transform: `translate3d(0, ${top}px, 0)` }}\n        >\n          {visibleData.map((item, i) => {\n            const style = {\n              height: `${item.height}px`,\n              lineHeight: `${item.height}px`\n            }\n            return (\n              <div\n                className=\"item\"\n                key={i}\n                style={style}\n              >{`item-${item.val}`}</div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default InfiniteList\n"],"sourceRoot":""}