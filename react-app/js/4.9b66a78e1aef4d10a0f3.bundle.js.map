{"version":3,"sources":["webpack:///./src/pages/Painting/webGL.js"],"names":["canvas","timeout","config","SIM_RESOLUTION","DYE_RESOLUTION","DENSITY_DISSIPATION","VELOCITY_DISSIPATION","PRESSURE_DISSIPATION","PRESSURE_ITERATIONS","CURL","SPLAT_RADIUS","SHADING","COLORFUL","PAUSED","BACK_COLOR","r","g","b","TRANSPARENT","BLOOM","BLOOM_ITERATIONS","BLOOM_RESOLUTION","BLOOM_INTENSITY","BLOOM_THRESHOLD","BLOOM_SOFT_KNEE","pointerPrototype","this","id","x","y","dx","dy","down","moved","color","pointers","splatStack","bloomFramebuffers","push","getWebGLContext","gl","ext","halfFloat","supportLinearFiltering","params","alpha","depth","stencil","antialias","preserveDrawingBuffer","getContext","isWebGL2","getExtension","clearColor","formatRGBA","formatRG","formatR","halfFloatTexType","HALF_FLOAT","HALF_FLOAT_OES","getSupportedFormat","RGBA16F","RGBA","RG16F","RG","R16F","RED","internalFormat","format","type","supportRenderTextureFormat","texture","createTexture","bindTexture","TEXTURE_2D","texParameteri","TEXTURE_MIN_FILTER","NEAREST","TEXTURE_MAG_FILTER","TEXTURE_WRAP_S","CLAMP_TO_EDGE","TEXTURE_WRAP_T","texImage2D","fbo","createFramebuffer","bindFramebuffer","FRAMEBUFFER","framebufferTexture2D","COLOR_ATTACHMENT0","checkFramebufferStatus","FRAMEBUFFER_COMPLETE","isMobile","test","navigator","userAgent","GLProgram","vertexShader","fragmentShader","uniforms","program","createProgram","attachShader","linkProgram","getProgramParameter","LINK_STATUS","getProgramInfoLog","uniformCount","ACTIVE_UNIFORMS","i","uniformName","getActiveUniform","name","getUniformLocation","useProgram","compileShader","source","shader","createShader","shaderSource","getShaderParameter","COMPILE_STATUS","getShaderInfoLog","baseVertexShader","VERTEX_SHADER","clearShader","FRAGMENT_SHADER","colorShader","backgroundShader","displayShader","displayBloomShader","displayShadingShader","displayBloomShadingShader","bloomPrefilterShader","bloomBlurShader","bloomFinalShader","splatShader","advectionManualFilteringShader","advectionShader","divergenceShader","curlShader","vorticityShader","pressureShader","gradientSubtractShader","blit","bindBuffer","ARRAY_BUFFER","createBuffer","bufferData","Float32Array","STATIC_DRAW","ELEMENT_ARRAY_BUFFER","Uint16Array","vertexAttribPointer","FLOAT","enableVertexAttribArray","destination","drawElements","TRIANGLES","UNSIGNED_SHORT","simWidth","simHeight","dyeWidth","dyeHeight","density","velocity","divergence","curl","pressure","bloom","ditheringTexture","createTextureAsync","clearProgram","colorProgram","backgroundProgram","displayProgram","displayBloomProgram","displayShadingProgram","displayBloomShadingProgram","bloomPrefilterProgram","bloomBlurProgram","bloomFinalProgram","splatProgram","advectionProgram","divergenceProgram","curlProgram","vorticityProgram","pressureProgram","gradienSubtractProgram","initFramebuffers","simRes","getResolution","dyeRes","width","height","texType","rgba","rg","filtering","LINEAR","createDoubleFBO","resizeDoubleFBO","createFBO","initBloomFramebuffers","res","length","w","h","param","activeTexture","TEXTURE0","viewport","clear","COLOR_BUFFER_BIT","attach","fbo1","fbo2","value","swap","temp","resizeFBO","target","newFBO","bind","uniform1i","uTexture","uniform1f","read","write","REPEAT","RGB","UNSIGNED_BYTE","Uint8Array","multipleSplats","parseInt","Math","random","lastColorChangeTime","Date","now","update","resizeCanvas","input","step","render","requestAnimationFrame","pop","p","splat","generateColor","dt","disable","BLEND","uniform2f","texelSize","uVelocity","uCurl","uDivergence","uPressure","dyeTexelSize","velocityId","uSource","dissipation","applyBloom","blendFunc","ONE","ONE_MINUS_SRC_ALPHA","enable","drawingBufferWidth","drawingBufferHeight","bc","uniform4f","aspectRatio","uBloom","uDithering","scale","getTextureScale","ditherScale","last","knee","curve0","curve1","curve2","uniform3f","curve","threshold","dest","baseTex","intensity","uTarget","point","radius","amount","clientWidth","clientHeight","c","HSVtoRGB","s","v","f","q","t","floor","resolution","max","round","min","addEventListener","e","offsetX","offsetY","preventDefault","touches","targetTouches","pointer","pageX","pageY","identifier","changedTouches","j","code","key","cancelAnimationFrame"],"mappings":"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","file":"js/4.9b66a78e1aef4d10a0f3.bundle.js","sourcesContent":["/* eslint-disable */\n'use strict'\nexport default canvas => {\n  let timeout = null\n\n  const config = {\n    SIM_RESOLUTION: 128,\n    DYE_RESOLUTION: 512,\n    DENSITY_DISSIPATION: 0.97,\n    VELOCITY_DISSIPATION: 0.98,\n    PRESSURE_DISSIPATION: 0.8,\n    PRESSURE_ITERATIONS: 20,\n    CURL: 30,\n    SPLAT_RADIUS: 0.5,\n    SHADING: true,\n    COLORFUL: true,\n    PAUSED: false,\n    BACK_COLOR: { r: 255, g: 255, b: 255 },\n    TRANSPARENT: false,\n    BLOOM: true,\n    BLOOM_ITERATIONS: 8,\n    BLOOM_RESOLUTION: 256,\n    BLOOM_INTENSITY: 0.8,\n    BLOOM_THRESHOLD: 0.6,\n    BLOOM_SOFT_KNEE: 0.7\n  }\n\n  function pointerPrototype() {\n    this.id = -1\n    this.x = 0\n    this.y = 0\n    this.dx = 0\n    this.dy = 0\n    this.down = false\n    this.moved = false\n    this.color = [30, 0, 300]\n  }\n\n  let pointers = []\n  let splatStack = []\n  let bloomFramebuffers = []\n  pointers.push(new pointerPrototype())\n\n  const { gl, ext } = getWebGLContext(canvas)\n\n  if (isMobile()) config.SHADING = false\n  if (!ext.supportLinearFiltering) {\n    config.SHADING = false\n    config.BLOOM = false\n  }\n\n  function getWebGLContext(canvas) {\n    const params = {\n      alpha: true,\n      depth: false,\n      stencil: false,\n      antialias: false,\n      preserveDrawingBuffer: false\n    }\n\n    let gl = canvas.getContext('webgl2', params)\n    const isWebGL2 = !!gl\n    if (!isWebGL2)\n      gl =\n        canvas.getContext('webgl', params) ||\n        canvas.getContext('experimental-webgl', params)\n\n    let halfFloat\n    let supportLinearFiltering\n    if (isWebGL2) {\n      gl.getExtension('EXT_color_buffer_float')\n      supportLinearFiltering = gl.getExtension('OES_texture_float_linear')\n    } else {\n      halfFloat = gl.getExtension('OES_texture_half_float')\n      supportLinearFiltering = gl.getExtension('OES_texture_half_float_linear')\n    }\n\n    gl.clearColor(0.0, 0.0, 0.0, 1.0)\n\n    const halfFloatTexType = isWebGL2 ? gl.HALF_FLOAT : halfFloat.HALF_FLOAT_OES\n    let formatRGBA\n    let formatRG\n    let formatR\n\n    if (isWebGL2) {\n      formatRGBA = getSupportedFormat(gl, gl.RGBA16F, gl.RGBA, halfFloatTexType)\n      formatRG = getSupportedFormat(gl, gl.RG16F, gl.RG, halfFloatTexType)\n      formatR = getSupportedFormat(gl, gl.R16F, gl.RED, halfFloatTexType)\n    } else {\n      formatRGBA = getSupportedFormat(gl, gl.RGBA, gl.RGBA, halfFloatTexType)\n      formatRG = getSupportedFormat(gl, gl.RGBA, gl.RGBA, halfFloatTexType)\n      formatR = getSupportedFormat(gl, gl.RGBA, gl.RGBA, halfFloatTexType)\n    }\n\n    return {\n      gl,\n      ext: {\n        formatRGBA,\n        formatRG,\n        formatR,\n        halfFloatTexType,\n        supportLinearFiltering\n      }\n    }\n  }\n\n  function getSupportedFormat(gl, internalFormat, format, type) {\n    if (!supportRenderTextureFormat(gl, internalFormat, format, type)) {\n      switch (internalFormat) {\n        case gl.R16F:\n          return getSupportedFormat(gl, gl.RG16F, gl.RG, type)\n        case gl.RG16F:\n          return getSupportedFormat(gl, gl.RGBA16F, gl.RGBA, type)\n        default:\n          return null\n      }\n    }\n\n    return {\n      internalFormat,\n      format\n    }\n  }\n\n  function supportRenderTextureFormat(gl, internalFormat, format, type) {\n    let texture = gl.createTexture()\n    gl.bindTexture(gl.TEXTURE_2D, texture)\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST)\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST)\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE)\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE)\n    gl.texImage2D(gl.TEXTURE_2D, 0, internalFormat, 4, 4, 0, format, type, null)\n\n    let fbo = gl.createFramebuffer()\n    gl.bindFramebuffer(gl.FRAMEBUFFER, fbo)\n    gl.framebufferTexture2D(\n      gl.FRAMEBUFFER,\n      gl.COLOR_ATTACHMENT0,\n      gl.TEXTURE_2D,\n      texture,\n      0\n    )\n\n    const status = gl.checkFramebufferStatus(gl.FRAMEBUFFER)\n    if (status != gl.FRAMEBUFFER_COMPLETE) return false\n    return true\n  }\n\n  function isMobile() {\n    return /Mobi|Android/i.test(navigator.userAgent)\n  }\n\n  class GLProgram {\n    constructor(vertexShader, fragmentShader) {\n      this.uniforms = {}\n      this.program = gl.createProgram()\n\n      gl.attachShader(this.program, vertexShader)\n      gl.attachShader(this.program, fragmentShader)\n      gl.linkProgram(this.program)\n\n      if (!gl.getProgramParameter(this.program, gl.LINK_STATUS))\n        throw gl.getProgramInfoLog(this.program)\n\n      const uniformCount = gl.getProgramParameter(\n        this.program,\n        gl.ACTIVE_UNIFORMS\n      )\n      for (let i = 0; i < uniformCount; i++) {\n        const uniformName = gl.getActiveUniform(this.program, i).name\n        this.uniforms[uniformName] = gl.getUniformLocation(\n          this.program,\n          uniformName\n        )\n      }\n    }\n\n    bind() {\n      gl.useProgram(this.program)\n    }\n  }\n\n  function compileShader(type, source) {\n    const shader = gl.createShader(type)\n    gl.shaderSource(shader, source)\n    gl.compileShader(shader)\n\n    if (!gl.getShaderParameter(shader, gl.COMPILE_STATUS))\n      throw gl.getShaderInfoLog(shader)\n\n    return shader\n  }\n\n  const baseVertexShader = compileShader(\n    gl.VERTEX_SHADER,\n    `\n      precision highp float;\n      attribute vec2 aPosition;\n      varying vec2 vUv;\n      varying vec2 vL;\n      varying vec2 vR;\n      varying vec2 vT;\n      varying vec2 vB;\n      uniform vec2 texelSize;\n      void main () {\n          vUv = aPosition * 0.5 + 0.5;\n          vL = vUv - vec2(texelSize.x, 0.0);\n          vR = vUv + vec2(texelSize.x, 0.0);\n          vT = vUv + vec2(0.0, texelSize.y);\n          vB = vUv - vec2(0.0, texelSize.y);\n          gl_Position = vec4(aPosition, 0.0, 1.0);\n      }\n  `\n  )\n\n  const clearShader = compileShader(\n    gl.FRAGMENT_SHADER,\n    `\n      precision mediump float;\n      precision mediump sampler2D;\n      varying highp vec2 vUv;\n      uniform sampler2D uTexture;\n      uniform float value;\n      void main () {\n          gl_FragColor = value * texture2D(uTexture, vUv);\n      }\n  `\n  )\n\n  const colorShader = compileShader(\n    gl.FRAGMENT_SHADER,\n    `\n      precision mediump float;\n      uniform vec4 color;\n      void main () {\n          gl_FragColor = color;\n      }\n  `\n  )\n\n  const backgroundShader = compileShader(\n    gl.FRAGMENT_SHADER,\n    `\n      precision highp float;\n      precision highp sampler2D;\n      varying vec2 vUv;\n      uniform sampler2D uTexture;\n      uniform float aspectRatio;\n      #define SCALE 25.0\n      void main () {\n          vec2 uv = floor(vUv * SCALE * vec2(aspectRatio, 1.0));\n          float v = mod(uv.x + uv.y, 2.0);\n          v = v * 0.1 + 0.8;\n          gl_FragColor = vec4(vec3(v), 1.0);\n      }\n  `\n  )\n\n  const displayShader = compileShader(\n    gl.FRAGMENT_SHADER,\n    `\n      precision highp float;\n      precision highp sampler2D;\n      varying vec2 vUv;\n      uniform sampler2D uTexture;\n      void main () {\n          vec3 C = texture2D(uTexture, vUv).rgb;\n          float a = max(C.r, max(C.g, C.b));\n          gl_FragColor = vec4(C, a);\n      }\n  `\n  )\n\n  const displayBloomShader = compileShader(\n    gl.FRAGMENT_SHADER,\n    `\n      precision highp float;\n      precision highp sampler2D;\n      varying vec2 vUv;\n      uniform sampler2D uTexture;\n      uniform sampler2D uBloom;\n      uniform sampler2D uDithering;\n      uniform vec2 ditherScale;\n      void main () {\n          vec3 C = texture2D(uTexture, vUv).rgb;\n          vec3 bloom = texture2D(uBloom, vUv).rgb;\n          vec3 noise = texture2D(uDithering, vUv * ditherScale).rgb;\n          noise = noise * 2.0 - 1.0;\n          bloom += noise / 800.0;\n          bloom = pow(bloom.rgb, vec3(1.0 / 2.2));\n          C += bloom;\n          float a = max(C.r, max(C.g, C.b));\n          gl_FragColor = vec4(C, a);\n      }\n  `\n  )\n\n  const displayShadingShader = compileShader(\n    gl.FRAGMENT_SHADER,\n    `\n      precision highp float;\n      precision highp sampler2D;\n      varying vec2 vUv;\n      varying vec2 vL;\n      varying vec2 vR;\n      varying vec2 vT;\n      varying vec2 vB;\n      uniform sampler2D uTexture;\n      uniform vec2 texelSize;\n      void main () {\n          vec3 L = texture2D(uTexture, vL).rgb;\n          vec3 R = texture2D(uTexture, vR).rgb;\n          vec3 T = texture2D(uTexture, vT).rgb;\n          vec3 B = texture2D(uTexture, vB).rgb;\n          vec3 C = texture2D(uTexture, vUv).rgb;\n          float dx = length(R) - length(L);\n          float dy = length(T) - length(B);\n          vec3 n = normalize(vec3(dx, dy, length(texelSize)));\n          vec3 l = vec3(0.0, 0.0, 1.0);\n          float diffuse = clamp(dot(n, l) + 0.7, 0.7, 1.0);\n          C.rgb *= diffuse;\n          float a = max(C.r, max(C.g, C.b));\n          gl_FragColor = vec4(C, a);\n      }\n  `\n  )\n\n  const displayBloomShadingShader = compileShader(\n    gl.FRAGMENT_SHADER,\n    `\n      precision highp float;\n      precision highp sampler2D;\n      varying vec2 vUv;\n      varying vec2 vL;\n      varying vec2 vR;\n      varying vec2 vT;\n      varying vec2 vB;\n      uniform sampler2D uTexture;\n      uniform sampler2D uBloom;\n      uniform sampler2D uDithering;\n      uniform vec2 ditherScale;\n      uniform vec2 texelSize;\n      void main () {\n          vec3 L = texture2D(uTexture, vL).rgb;\n          vec3 R = texture2D(uTexture, vR).rgb;\n          vec3 T = texture2D(uTexture, vT).rgb;\n          vec3 B = texture2D(uTexture, vB).rgb;\n          vec3 C = texture2D(uTexture, vUv).rgb;\n          float dx = length(R) - length(L);\n          float dy = length(T) - length(B);\n          vec3 n = normalize(vec3(dx, dy, length(texelSize)));\n          vec3 l = vec3(0.0, 0.0, 1.0);\n          float diffuse = clamp(dot(n, l) + 0.7, 0.7, 1.0);\n          C *= diffuse;\n          vec3 bloom = texture2D(uBloom, vUv).rgb;\n          vec3 noise = texture2D(uDithering, vUv * ditherScale).rgb;\n          noise = noise * 2.0 - 1.0;\n          bloom += noise / 800.0;\n          bloom = pow(bloom.rgb, vec3(1.0 / 2.2));\n          C += bloom;\n          float a = max(C.r, max(C.g, C.b));\n          gl_FragColor = vec4(C, a);\n      }\n  `\n  )\n\n  const bloomPrefilterShader = compileShader(\n    gl.FRAGMENT_SHADER,\n    `\n      precision mediump float;\n      precision mediump sampler2D;\n      varying vec2 vUv;\n      uniform sampler2D uTexture;\n      uniform vec3 curve;\n      uniform float threshold;\n      void main () {\n          vec3 c = texture2D(uTexture, vUv).rgb;\n          float br = max(c.r, max(c.g, c.b));\n          float rq = clamp(br - curve.x, 0.0, curve.y);\n          rq = curve.z * rq * rq;\n          c *= max(rq, br - threshold) / max(br, 0.0001);\n          gl_FragColor = vec4(c, 0.0);\n      }\n  `\n  )\n\n  const bloomBlurShader = compileShader(\n    gl.FRAGMENT_SHADER,\n    `\n      precision mediump float;\n      precision mediump sampler2D;\n      varying vec2 vL;\n      varying vec2 vR;\n      varying vec2 vT;\n      varying vec2 vB;\n      uniform sampler2D uTexture;\n      void main () {\n          vec4 sum = vec4(0.0);\n          sum += texture2D(uTexture, vL);\n          sum += texture2D(uTexture, vR);\n          sum += texture2D(uTexture, vT);\n          sum += texture2D(uTexture, vB);\n          sum *= 0.25;\n          gl_FragColor = sum;\n      }\n  `\n  )\n\n  const bloomFinalShader = compileShader(\n    gl.FRAGMENT_SHADER,\n    `\n      precision mediump float;\n      precision mediump sampler2D;\n      varying vec2 vL;\n      varying vec2 vR;\n      varying vec2 vT;\n      varying vec2 vB;\n      uniform sampler2D uTexture;\n      uniform float intensity;\n      void main () {\n          vec4 sum = vec4(0.0);\n          sum += texture2D(uTexture, vL);\n          sum += texture2D(uTexture, vR);\n          sum += texture2D(uTexture, vT);\n          sum += texture2D(uTexture, vB);\n          sum *= 0.25;\n          gl_FragColor = sum * intensity;\n      }\n  `\n  )\n\n  const splatShader = compileShader(\n    gl.FRAGMENT_SHADER,\n    `\n      precision highp float;\n      precision highp sampler2D;\n      varying vec2 vUv;\n      uniform sampler2D uTarget;\n      uniform float aspectRatio;\n      uniform vec3 color;\n      uniform vec2 point;\n      uniform float radius;\n      void main () {\n          vec2 p = vUv - point.xy;\n          p.x *= aspectRatio;\n          vec3 splat = exp(-dot(p, p) / radius) * color;\n          vec3 base = texture2D(uTarget, vUv).xyz;\n          gl_FragColor = vec4(base + splat, 1.0);\n      }\n  `\n  )\n\n  const advectionManualFilteringShader = compileShader(\n    gl.FRAGMENT_SHADER,\n    `\n      precision highp float;\n      precision highp sampler2D;\n      varying vec2 vUv;\n      uniform sampler2D uVelocity;\n      uniform sampler2D uSource;\n      uniform vec2 texelSize;\n      uniform vec2 dyeTexelSize;\n      uniform float dt;\n      uniform float dissipation;\n      vec4 bilerp (sampler2D sam, vec2 uv, vec2 tsize) {\n          vec2 st = uv / tsize - 0.5;\n          vec2 iuv = floor(st);\n          vec2 fuv = fract(st);\n          vec4 a = texture2D(sam, (iuv + vec2(0.5, 0.5)) * tsize);\n          vec4 b = texture2D(sam, (iuv + vec2(1.5, 0.5)) * tsize);\n          vec4 c = texture2D(sam, (iuv + vec2(0.5, 1.5)) * tsize);\n          vec4 d = texture2D(sam, (iuv + vec2(1.5, 1.5)) * tsize);\n          return mix(mix(a, b, fuv.x), mix(c, d, fuv.x), fuv.y);\n      }\n      void main () {\n          vec2 coord = vUv - dt * bilerp(uVelocity, vUv, texelSize).xy * texelSize;\n          gl_FragColor = dissipation * bilerp(uSource, coord, dyeTexelSize);\n          gl_FragColor.a = 1.0;\n      }\n  `\n  )\n\n  const advectionShader = compileShader(\n    gl.FRAGMENT_SHADER,\n    `\n      precision highp float;\n      precision highp sampler2D;\n      varying vec2 vUv;\n      uniform sampler2D uVelocity;\n      uniform sampler2D uSource;\n      uniform vec2 texelSize;\n      uniform float dt;\n      uniform float dissipation;\n      void main () {\n          vec2 coord = vUv - dt * texture2D(uVelocity, vUv).xy * texelSize;\n          gl_FragColor = dissipation * texture2D(uSource, coord);\n          gl_FragColor.a = 1.0;\n      }\n  `\n  )\n\n  const divergenceShader = compileShader(\n    gl.FRAGMENT_SHADER,\n    `\n      precision mediump float;\n      precision mediump sampler2D;\n      varying highp vec2 vUv;\n      varying highp vec2 vL;\n      varying highp vec2 vR;\n      varying highp vec2 vT;\n      varying highp vec2 vB;\n      uniform sampler2D uVelocity;\n      void main () {\n          float L = texture2D(uVelocity, vL).x;\n          float R = texture2D(uVelocity, vR).x;\n          float T = texture2D(uVelocity, vT).y;\n          float B = texture2D(uVelocity, vB).y;\n          vec2 C = texture2D(uVelocity, vUv).xy;\n          if (vL.x < 0.0) { L = -C.x; }\n          if (vR.x > 1.0) { R = -C.x; }\n          if (vT.y > 1.0) { T = -C.y; }\n          if (vB.y < 0.0) { B = -C.y; }\n          float div = 0.5 * (R - L + T - B);\n          gl_FragColor = vec4(div, 0.0, 0.0, 1.0);\n      }\n  `\n  )\n\n  const curlShader = compileShader(\n    gl.FRAGMENT_SHADER,\n    `\n      precision mediump float;\n      precision mediump sampler2D;\n      varying highp vec2 vUv;\n      varying highp vec2 vL;\n      varying highp vec2 vR;\n      varying highp vec2 vT;\n      varying highp vec2 vB;\n      uniform sampler2D uVelocity;\n      void main () {\n          float L = texture2D(uVelocity, vL).y;\n          float R = texture2D(uVelocity, vR).y;\n          float T = texture2D(uVelocity, vT).x;\n          float B = texture2D(uVelocity, vB).x;\n          float vorticity = R - L - T + B;\n          gl_FragColor = vec4(0.5 * vorticity, 0.0, 0.0, 1.0);\n      }\n  `\n  )\n\n  const vorticityShader = compileShader(\n    gl.FRAGMENT_SHADER,\n    `\n      precision highp float;\n      precision highp sampler2D;\n      varying vec2 vUv;\n      varying vec2 vL;\n      varying vec2 vR;\n      varying vec2 vT;\n      varying vec2 vB;\n      uniform sampler2D uVelocity;\n      uniform sampler2D uCurl;\n      uniform float curl;\n      uniform float dt;\n      void main () {\n          float L = texture2D(uCurl, vL).x;\n          float R = texture2D(uCurl, vR).x;\n          float T = texture2D(uCurl, vT).x;\n          float B = texture2D(uCurl, vB).x;\n          float C = texture2D(uCurl, vUv).x;\n          vec2 force = 0.5 * vec2(abs(T) - abs(B), abs(R) - abs(L));\n          force /= length(force) + 0.0001;\n          force *= curl * C;\n          force.y *= -1.0;\n          vec2 vel = texture2D(uVelocity, vUv).xy;\n          gl_FragColor = vec4(vel + force * dt, 0.0, 1.0);\n      }\n  `\n  )\n\n  const pressureShader = compileShader(\n    gl.FRAGMENT_SHADER,\n    `\n      precision mediump float;\n      precision mediump sampler2D;\n      varying highp vec2 vUv;\n      varying highp vec2 vL;\n      varying highp vec2 vR;\n      varying highp vec2 vT;\n      varying highp vec2 vB;\n      uniform sampler2D uPressure;\n      uniform sampler2D uDivergence;\n      vec2 boundary (vec2 uv) {\n          return uv;\n          // uncomment if you use wrap or repeat texture mode\n          // uv = min(max(uv, 0.0), 1.0);\n          // return uv;\n      }\n      void main () {\n          float L = texture2D(uPressure, boundary(vL)).x;\n          float R = texture2D(uPressure, boundary(vR)).x;\n          float T = texture2D(uPressure, boundary(vT)).x;\n          float B = texture2D(uPressure, boundary(vB)).x;\n          float C = texture2D(uPressure, vUv).x;\n          float divergence = texture2D(uDivergence, vUv).x;\n          float pressure = (L + R + B + T - divergence) * 0.25;\n          gl_FragColor = vec4(pressure, 0.0, 0.0, 1.0);\n      }\n  `\n  )\n\n  const gradientSubtractShader = compileShader(\n    gl.FRAGMENT_SHADER,\n    `\n      precision mediump float;\n      precision mediump sampler2D;\n      varying highp vec2 vUv;\n      varying highp vec2 vL;\n      varying highp vec2 vR;\n      varying highp vec2 vT;\n      varying highp vec2 vB;\n      uniform sampler2D uPressure;\n      uniform sampler2D uVelocity;\n      vec2 boundary (vec2 uv) {\n          return uv;\n          // uv = min(max(uv, 0.0), 1.0);\n          // return uv;\n      }\n      void main () {\n          float L = texture2D(uPressure, boundary(vL)).x;\n          float R = texture2D(uPressure, boundary(vR)).x;\n          float T = texture2D(uPressure, boundary(vT)).x;\n          float B = texture2D(uPressure, boundary(vB)).x;\n          vec2 velocity = texture2D(uVelocity, vUv).xy;\n          velocity.xy -= vec2(R - L, T - B);\n          gl_FragColor = vec4(velocity, 0.0, 1.0);\n      }\n  `\n  )\n\n  const blit = (() => {\n    gl.bindBuffer(gl.ARRAY_BUFFER, gl.createBuffer())\n    gl.bufferData(\n      gl.ARRAY_BUFFER,\n      new Float32Array([-1, -1, -1, 1, 1, 1, 1, -1]),\n      gl.STATIC_DRAW\n    )\n    gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, gl.createBuffer())\n    gl.bufferData(\n      gl.ELEMENT_ARRAY_BUFFER,\n      new Uint16Array([0, 1, 2, 0, 2, 3]),\n      gl.STATIC_DRAW\n    )\n    gl.vertexAttribPointer(0, 2, gl.FLOAT, false, 0, 0)\n    gl.enableVertexAttribArray(0)\n\n    return destination => {\n      gl.bindFramebuffer(gl.FRAMEBUFFER, destination)\n      gl.drawElements(gl.TRIANGLES, 6, gl.UNSIGNED_SHORT, 0)\n    }\n  })()\n\n  let simWidth\n  let simHeight\n  let dyeWidth\n  let dyeHeight\n  let density\n  let velocity\n  let divergence\n  let curl\n  let pressure\n  let bloom\n\n  let ditheringTexture = createTextureAsync()\n\n  const clearProgram = new GLProgram(baseVertexShader, clearShader)\n  const colorProgram = new GLProgram(baseVertexShader, colorShader)\n  const backgroundProgram = new GLProgram(baseVertexShader, backgroundShader)\n  const displayProgram = new GLProgram(baseVertexShader, displayShader)\n  const displayBloomProgram = new GLProgram(baseVertexShader, displayBloomShader)\n  const displayShadingProgram = new GLProgram(\n    baseVertexShader,\n    displayShadingShader\n  )\n  const displayBloomShadingProgram = new GLProgram(\n    baseVertexShader,\n    displayBloomShadingShader\n  )\n  const bloomPrefilterProgram = new GLProgram(\n    baseVertexShader,\n    bloomPrefilterShader\n  )\n  const bloomBlurProgram = new GLProgram(baseVertexShader, bloomBlurShader)\n  const bloomFinalProgram = new GLProgram(baseVertexShader, bloomFinalShader)\n  const splatProgram = new GLProgram(baseVertexShader, splatShader)\n  const advectionProgram = new GLProgram(\n    baseVertexShader,\n    ext.supportLinearFiltering ? advectionShader : advectionManualFilteringShader\n  )\n  const divergenceProgram = new GLProgram(baseVertexShader, divergenceShader)\n  const curlProgram = new GLProgram(baseVertexShader, curlShader)\n  const vorticityProgram = new GLProgram(baseVertexShader, vorticityShader)\n  const pressureProgram = new GLProgram(baseVertexShader, pressureShader)\n  const gradienSubtractProgram = new GLProgram(\n    baseVertexShader,\n    gradientSubtractShader\n  )\n\n  function initFramebuffers() {\n    let simRes = getResolution(config.SIM_RESOLUTION)\n    let dyeRes = getResolution(config.DYE_RESOLUTION)\n\n    simWidth = simRes.width\n    simHeight = simRes.height\n    dyeWidth = dyeRes.width\n    dyeHeight = dyeRes.height\n\n    const texType = ext.halfFloatTexType\n    const rgba = ext.formatRGBA\n    const rg = ext.formatRG\n    const r = ext.formatR\n    const filtering = ext.supportLinearFiltering ? gl.LINEAR : gl.NEAREST\n\n    if (density == null)\n      density = createDoubleFBO(\n        dyeWidth,\n        dyeHeight,\n        rgba.internalFormat,\n        rgba.format,\n        texType,\n        filtering\n      )\n    else\n      density = resizeDoubleFBO(\n        density,\n        dyeWidth,\n        dyeHeight,\n        rgba.internalFormat,\n        rgba.format,\n        texType,\n        filtering\n      )\n\n    if (velocity == null)\n      velocity = createDoubleFBO(\n        simWidth,\n        simHeight,\n        rg.internalFormat,\n        rg.format,\n        texType,\n        filtering\n      )\n    else\n      velocity = resizeDoubleFBO(\n        velocity,\n        simWidth,\n        simHeight,\n        rg.internalFormat,\n        rg.format,\n        texType,\n        filtering\n      )\n\n    divergence = createFBO(\n      simWidth,\n      simHeight,\n      r.internalFormat,\n      r.format,\n      texType,\n      gl.NEAREST\n    )\n    curl = createFBO(\n      simWidth,\n      simHeight,\n      r.internalFormat,\n      r.format,\n      texType,\n      gl.NEAREST\n    )\n    pressure = createDoubleFBO(\n      simWidth,\n      simHeight,\n      r.internalFormat,\n      r.format,\n      texType,\n      gl.NEAREST\n    )\n\n    initBloomFramebuffers()\n  }\n\n  function initBloomFramebuffers() {\n    let res = getResolution(config.BLOOM_RESOLUTION)\n\n    const texType = ext.halfFloatTexType\n    const rgba = ext.formatRGBA\n    const filtering = ext.supportLinearFiltering ? gl.LINEAR : gl.NEAREST\n\n    bloom = createFBO(\n      res.width,\n      res.height,\n      rgba.internalFormat,\n      rgba.format,\n      texType,\n      filtering\n    )\n\n    bloomFramebuffers.length = 0\n    for (let i = 0; i < config.BLOOM_ITERATIONS; i++) {\n      let width = res.width >> (i + 1)\n      let height = res.height >> (i + 1)\n\n      if (width < 2 || height < 2) break\n\n      let fbo = createFBO(\n        width,\n        height,\n        rgba.internalFormat,\n        rgba.format,\n        texType,\n        filtering\n      )\n      bloomFramebuffers.push(fbo)\n    }\n  }\n\n  function createFBO(w, h, internalFormat, format, type, param) {\n    gl.activeTexture(gl.TEXTURE0)\n    let texture = gl.createTexture()\n    gl.bindTexture(gl.TEXTURE_2D, texture)\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, param)\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, param)\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE)\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE)\n    gl.texImage2D(gl.TEXTURE_2D, 0, internalFormat, w, h, 0, format, type, null)\n\n    let fbo = gl.createFramebuffer()\n    gl.bindFramebuffer(gl.FRAMEBUFFER, fbo)\n    gl.framebufferTexture2D(\n      gl.FRAMEBUFFER,\n      gl.COLOR_ATTACHMENT0,\n      gl.TEXTURE_2D,\n      texture,\n      0\n    )\n    gl.viewport(0, 0, w, h)\n    gl.clear(gl.COLOR_BUFFER_BIT)\n\n    return {\n      texture,\n      fbo,\n      width: w,\n      height: h,\n      attach(id) {\n        gl.activeTexture(gl.TEXTURE0 + id)\n        gl.bindTexture(gl.TEXTURE_2D, texture)\n        return id\n      }\n    }\n  }\n\n  function createDoubleFBO(w, h, internalFormat, format, type, param) {\n    let fbo1 = createFBO(w, h, internalFormat, format, type, param)\n    let fbo2 = createFBO(w, h, internalFormat, format, type, param)\n\n    return {\n      get read() {\n        return fbo1\n      },\n      set read(value) {\n        fbo1 = value\n      },\n      get write() {\n        return fbo2\n      },\n      set write(value) {\n        fbo2 = value\n      },\n      swap() {\n        let temp = fbo1\n        fbo1 = fbo2\n        fbo2 = temp\n      }\n    }\n  }\n\n  function resizeFBO(target, w, h, internalFormat, format, type, param) {\n    let newFBO = createFBO(w, h, internalFormat, format, type, param)\n    clearProgram.bind()\n    gl.uniform1i(clearProgram.uniforms.uTexture, target.attach(0))\n    gl.uniform1f(clearProgram.uniforms.value, 1)\n    blit(newFBO.fbo)\n    return newFBO\n  }\n\n  function resizeDoubleFBO(target, w, h, internalFormat, format, type, param) {\n    target.read = resizeFBO(\n      target.read,\n      w,\n      h,\n      internalFormat,\n      format,\n      type,\n      param\n    )\n    target.write = createFBO(w, h, internalFormat, format, type, param)\n    return target\n  }\n\n  function createTextureAsync() {\n    let texture = gl.createTexture()\n    gl.bindTexture(gl.TEXTURE_2D, texture)\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR)\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.LINEAR)\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.REPEAT)\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.REPEAT)\n    gl.texImage2D(\n      gl.TEXTURE_2D,\n      0,\n      gl.RGB,\n      1,\n      1,\n      0,\n      gl.RGB,\n      gl.UNSIGNED_BYTE,\n      new Uint8Array([255, 255, 255])\n    )\n\n    let obj = {\n      texture,\n      width: 1,\n      height: 1,\n      attach(id) {\n        gl.activeTexture(gl.TEXTURE0 + id)\n        gl.bindTexture(gl.TEXTURE_2D, texture)\n        return id\n      }\n    }\n\n    return obj\n  }\n\n  initFramebuffers()\n  multipleSplats(parseInt(Math.random() * 20) + 5)\n\n  let lastColorChangeTime = Date.now()\n\n  update()\n\n  function update() {\n    resizeCanvas()\n    input()\n    if (!config.PAUSED) step(0.016)\n    render(null)\n    timeout = requestAnimationFrame(update)\n  }\n\n  function input() {\n    if (splatStack.length > 0) multipleSplats(splatStack.pop())\n\n    for (let i = 0; i < pointers.length; i++) {\n      const p = pointers[i]\n      if (p.moved) {\n        splat(p.x, p.y, p.dx, p.dy, p.color)\n        p.moved = false\n      }\n    }\n\n    if (!config.COLORFUL) return\n\n    if (lastColorChangeTime + 100 < Date.now()) {\n      lastColorChangeTime = Date.now()\n      for (let i = 0; i < pointers.length; i++) {\n        const p = pointers[i]\n        p.color = generateColor()\n      }\n    }\n  }\n\n  function step(dt) {\n    gl.disable(gl.BLEND)\n    gl.viewport(0, 0, simWidth, simHeight)\n\n    curlProgram.bind()\n    gl.uniform2f(curlProgram.uniforms.texelSize, 1.0 / simWidth, 1.0 / simHeight)\n    gl.uniform1i(curlProgram.uniforms.uVelocity, velocity.read.attach(0))\n    blit(curl.fbo)\n\n    vorticityProgram.bind()\n    gl.uniform2f(\n      vorticityProgram.uniforms.texelSize,\n      1.0 / simWidth,\n      1.0 / simHeight\n    )\n    gl.uniform1i(vorticityProgram.uniforms.uVelocity, velocity.read.attach(0))\n    gl.uniform1i(vorticityProgram.uniforms.uCurl, curl.attach(1))\n    gl.uniform1f(vorticityProgram.uniforms.curl, config.CURL)\n    gl.uniform1f(vorticityProgram.uniforms.dt, dt)\n    blit(velocity.write.fbo)\n    velocity.swap()\n\n    divergenceProgram.bind()\n    gl.uniform2f(\n      divergenceProgram.uniforms.texelSize,\n      1.0 / simWidth,\n      1.0 / simHeight\n    )\n    gl.uniform1i(divergenceProgram.uniforms.uVelocity, velocity.read.attach(0))\n    blit(divergence.fbo)\n\n    clearProgram.bind()\n    gl.uniform1i(clearProgram.uniforms.uTexture, pressure.read.attach(0))\n    gl.uniform1f(clearProgram.uniforms.value, config.PRESSURE_DISSIPATION)\n    blit(pressure.write.fbo)\n    pressure.swap()\n\n    pressureProgram.bind()\n    gl.uniform2f(\n      pressureProgram.uniforms.texelSize,\n      1.0 / simWidth,\n      1.0 / simHeight\n    )\n    gl.uniform1i(pressureProgram.uniforms.uDivergence, divergence.attach(0))\n    for (let i = 0; i < config.PRESSURE_ITERATIONS; i++) {\n      gl.uniform1i(pressureProgram.uniforms.uPressure, pressure.read.attach(1))\n      blit(pressure.write.fbo)\n      pressure.swap()\n    }\n\n    gradienSubtractProgram.bind()\n    gl.uniform2f(\n      gradienSubtractProgram.uniforms.texelSize,\n      1.0 / simWidth,\n      1.0 / simHeight\n    )\n    gl.uniform1i(\n      gradienSubtractProgram.uniforms.uPressure,\n      pressure.read.attach(0)\n    )\n    gl.uniform1i(\n      gradienSubtractProgram.uniforms.uVelocity,\n      velocity.read.attach(1)\n    )\n    blit(velocity.write.fbo)\n    velocity.swap()\n\n    advectionProgram.bind()\n    gl.uniform2f(\n      advectionProgram.uniforms.texelSize,\n      1.0 / simWidth,\n      1.0 / simHeight\n    )\n    if (!ext.supportLinearFiltering)\n      gl.uniform2f(\n        advectionProgram.uniforms.dyeTexelSize,\n        1.0 / simWidth,\n        1.0 / simHeight\n      )\n    let velocityId = velocity.read.attach(0)\n    gl.uniform1i(advectionProgram.uniforms.uVelocity, velocityId)\n    gl.uniform1i(advectionProgram.uniforms.uSource, velocityId)\n    gl.uniform1f(advectionProgram.uniforms.dt, dt)\n    gl.uniform1f(\n      advectionProgram.uniforms.dissipation,\n      config.VELOCITY_DISSIPATION\n    )\n    blit(velocity.write.fbo)\n    velocity.swap()\n\n    gl.viewport(0, 0, dyeWidth, dyeHeight)\n\n    if (!ext.supportLinearFiltering)\n      gl.uniform2f(\n        advectionProgram.uniforms.dyeTexelSize,\n        1.0 / dyeWidth,\n        1.0 / dyeHeight\n      )\n    gl.uniform1i(advectionProgram.uniforms.uVelocity, velocity.read.attach(0))\n    gl.uniform1i(advectionProgram.uniforms.uSource, density.read.attach(1))\n    gl.uniform1f(\n      advectionProgram.uniforms.dissipation,\n      config.DENSITY_DISSIPATION\n    )\n    blit(density.write.fbo)\n    density.swap()\n  }\n\n  function render(target) {\n    if (config.BLOOM) applyBloom(density.read, bloom)\n\n    if (target == null || !config.TRANSPARENT) {\n      gl.blendFunc(gl.ONE, gl.ONE_MINUS_SRC_ALPHA)\n      gl.enable(gl.BLEND)\n    } else {\n      gl.disable(gl.BLEND)\n    }\n\n    let width = target == null ? gl.drawingBufferWidth : dyeWidth\n    let height = target == null ? gl.drawingBufferHeight : dyeHeight\n\n    gl.viewport(0, 0, width, height)\n\n    if (!config.TRANSPARENT) {\n      colorProgram.bind()\n      let bc = config.BACK_COLOR\n      gl.uniform4f(\n        colorProgram.uniforms.color,\n        bc.r / 255,\n        bc.g / 255,\n        bc.b / 255,\n        1\n      )\n      blit(target)\n    }\n\n    if (target == null && config.TRANSPARENT) {\n      backgroundProgram.bind()\n      gl.uniform1f(\n        backgroundProgram.uniforms.aspectRatio,\n        canvas.width / canvas.height\n      )\n      blit(null)\n    }\n\n    if (config.SHADING) {\n      let program = config.BLOOM\n        ? displayBloomShadingProgram\n        : displayShadingProgram\n      program.bind()\n      gl.uniform2f(program.uniforms.texelSize, 1.0 / width, 1.0 / height)\n      gl.uniform1i(program.uniforms.uTexture, density.read.attach(0))\n      if (config.BLOOM) {\n        gl.uniform1i(program.uniforms.uBloom, bloom.attach(1))\n        gl.uniform1i(program.uniforms.uDithering, ditheringTexture.attach(2))\n        let scale = getTextureScale(ditheringTexture, width, height)\n        gl.uniform2f(program.uniforms.ditherScale, scale.x, scale.y)\n      }\n    } else {\n      let program = config.BLOOM ? displayBloomProgram : displayProgram\n      program.bind()\n      gl.uniform1i(program.uniforms.uTexture, density.read.attach(0))\n      if (config.BLOOM) {\n        gl.uniform1i(program.uniforms.uBloom, bloom.attach(1))\n        gl.uniform1i(program.uniforms.uDithering, ditheringTexture.attach(2))\n        let scale = getTextureScale(ditheringTexture, width, height)\n        gl.uniform2f(program.uniforms.ditherScale, scale.x, scale.y)\n      }\n    }\n\n    blit(target)\n  }\n\n  function applyBloom(source, destination) {\n    if (bloomFramebuffers.length < 2) return\n\n    let last = destination\n\n    gl.disable(gl.BLEND)\n    bloomPrefilterProgram.bind()\n    let knee = config.BLOOM_THRESHOLD * config.BLOOM_SOFT_KNEE + 0.0001\n    let curve0 = config.BLOOM_THRESHOLD - knee\n    let curve1 = knee * 2\n    let curve2 = 0.25 / knee\n    gl.uniform3f(bloomPrefilterProgram.uniforms.curve, curve0, curve1, curve2)\n    gl.uniform1f(bloomPrefilterProgram.uniforms.threshold, config.BLOOM_THRESHOLD)\n    gl.uniform1i(bloomPrefilterProgram.uniforms.uTexture, source.attach(0))\n    gl.viewport(0, 0, last.width, last.height)\n    blit(last.fbo)\n\n    bloomBlurProgram.bind()\n    for (let i = 0; i < bloomFramebuffers.length; i++) {\n      let dest = bloomFramebuffers[i]\n      gl.uniform2f(\n        bloomBlurProgram.uniforms.texelSize,\n        1.0 / last.width,\n        1.0 / last.height\n      )\n      gl.uniform1i(bloomBlurProgram.uniforms.uTexture, last.attach(0))\n      gl.viewport(0, 0, dest.width, dest.height)\n      blit(dest.fbo)\n      last = dest\n    }\n\n    gl.blendFunc(gl.ONE, gl.ONE)\n    gl.enable(gl.BLEND)\n\n    for (let i = bloomFramebuffers.length - 2; i >= 0; i--) {\n      let baseTex = bloomFramebuffers[i]\n      gl.uniform2f(\n        bloomBlurProgram.uniforms.texelSize,\n        1.0 / last.width,\n        1.0 / last.height\n      )\n      gl.uniform1i(bloomBlurProgram.uniforms.uTexture, last.attach(0))\n      gl.viewport(0, 0, baseTex.width, baseTex.height)\n      blit(baseTex.fbo)\n      last = baseTex\n    }\n\n    gl.disable(gl.BLEND)\n    bloomFinalProgram.bind()\n    gl.uniform2f(\n      bloomFinalProgram.uniforms.texelSize,\n      1.0 / last.width,\n      1.0 / last.height\n    )\n    gl.uniform1i(bloomFinalProgram.uniforms.uTexture, last.attach(0))\n    gl.uniform1f(bloomFinalProgram.uniforms.intensity, config.BLOOM_INTENSITY)\n    gl.viewport(0, 0, destination.width, destination.height)\n    blit(destination.fbo)\n  }\n\n  function splat(x, y, dx, dy, color) {\n    gl.viewport(0, 0, simWidth, simHeight)\n    splatProgram.bind()\n    gl.uniform1i(splatProgram.uniforms.uTarget, velocity.read.attach(0))\n    gl.uniform1f(splatProgram.uniforms.aspectRatio, canvas.width / canvas.height)\n    gl.uniform2f(\n      splatProgram.uniforms.point,\n      x / canvas.width,\n      1.0 - y / canvas.height\n    )\n    gl.uniform3f(splatProgram.uniforms.color, dx, -dy, 1.0)\n    gl.uniform1f(splatProgram.uniforms.radius, config.SPLAT_RADIUS / 100.0)\n    blit(velocity.write.fbo)\n    velocity.swap()\n\n    gl.viewport(0, 0, dyeWidth, dyeHeight)\n    gl.uniform1i(splatProgram.uniforms.uTarget, density.read.attach(0))\n    gl.uniform3f(splatProgram.uniforms.color, color.r, color.g, color.b)\n    blit(density.write.fbo)\n    density.swap()\n  }\n\n  function multipleSplats(amount) {\n    for (let i = 0; i < amount; i++) {\n      const color = generateColor()\n      color.r *= 10.0\n      color.g *= 10.0\n      color.b *= 10.0\n      const x = canvas.width * Math.random()\n      const y = canvas.height * Math.random()\n      const dx = 1000 * (Math.random() - 0.5)\n      const dy = 1000 * (Math.random() - 0.5)\n      splat(x, y, dx, dy, color)\n    }\n  }\n\n  function resizeCanvas() {\n    if (\n      canvas.width != canvas.clientWidth ||\n      canvas.height != canvas.clientHeight\n    ) {\n      canvas.width = canvas.clientWidth\n      canvas.height = canvas.clientHeight\n      initFramebuffers()\n    }\n  }\n\n  canvas.addEventListener('mousemove', e => {\n    pointers[0].moved = pointers[0].down\n    pointers[0].dx = (e.offsetX - pointers[0].x) * 5.0\n    pointers[0].dy = (e.offsetY - pointers[0].y) * 5.0\n    pointers[0].x = e.offsetX\n    pointers[0].y = e.offsetY\n  })\n\n  canvas.addEventListener(\n    'touchmove',\n    e => {\n      e.preventDefault()\n      const touches = e.targetTouches\n      for (let i = 0; i < touches.length; i++) {\n        let pointer = pointers[i]\n        pointer.moved = pointer.down\n        pointer.dx = (touches[i].pageX - pointer.x) * 8.0\n        pointer.dy = (touches[i].pageY - pointer.y) * 8.0\n        pointer.x = touches[i].pageX\n        pointer.y = touches[i].pageY\n      }\n    },\n    false\n  )\n\n  canvas.addEventListener('mousedown', () => {\n    pointers[0].down = true\n    pointers[0].color = generateColor()\n  })\n\n  canvas.addEventListener('touchstart', e => {\n    e.preventDefault()\n    const touches = e.targetTouches\n    for (let i = 0; i < touches.length; i++) {\n      if (i >= pointers.length) pointers.push(new pointerPrototype())\n\n      pointers[i].id = touches[i].identifier\n      pointers[i].down = true\n      pointers[i].x = touches[i].pageX\n      pointers[i].y = touches[i].pageY\n      pointers[i].color = generateColor()\n    }\n  })\n\n  canvas.addEventListener('mouseup', () => {\n    pointers[0].down = false\n  })\n\n  canvas.addEventListener('touchend', e => {\n    const touches = e.changedTouches\n    for (let i = 0; i < touches.length; i++)\n      for (let j = 0; j < pointers.length; j++)\n        if (touches[i].identifier == pointers[j].id) pointers[j].down = false\n  })\n\n  canvas.addEventListener('keydown', e => {\n    if (e.code === 'KeyP') config.PAUSED = !config.PAUSED\n    if (e.key === ' ') splatStack.push(parseInt(Math.random() * 20) + 5)\n  })\n\n  function generateColor() {\n    let c = HSVtoRGB(Math.random(), 1.0, 1.0)\n    c.r *= 0.15\n    c.g *= 0.15\n    c.b *= 0.15\n    return c\n  }\n\n  function HSVtoRGB(h, s, v) {\n    let r, g, b, i, f, p, q, t\n    i = Math.floor(h * 6)\n    f = h * 6 - i\n    p = v * (1 - s)\n    q = v * (1 - f * s)\n    t = v * (1 - (1 - f) * s)\n\n    switch (i % 6) {\n      case 0:\n        ;(r = v), (g = t), (b = p)\n        break\n      case 1:\n        ;(r = q), (g = v), (b = p)\n        break\n      case 2:\n        ;(r = p), (g = v), (b = t)\n        break\n      case 3:\n        ;(r = p), (g = q), (b = v)\n        break\n      case 4:\n        ;(r = t), (g = p), (b = v)\n        break\n      case 5:\n        ;(r = v), (g = p), (b = q)\n        break\n    }\n\n    return {\n      r,\n      g,\n      b\n    }\n  }\n\n  function getResolution(resolution) {\n    let aspectRatio = gl.drawingBufferWidth / gl.drawingBufferHeight\n    if (aspectRatio < 1) aspectRatio = 1.0 / aspectRatio\n\n    let max = Math.round(resolution * aspectRatio)\n    let min = Math.round(resolution)\n\n    if (gl.drawingBufferWidth > gl.drawingBufferHeight)\n      return { width: max, height: min }\n    else return { width: min, height: max }\n  }\n\n  function getTextureScale(texture, width, height) {\n    return {\n      x: width / texture.width,\n      y: height / texture.height\n    }\n  }\n\n  return () => {\n    cancelAnimationFrame(timeout)\n  }\n}\n"],"sourceRoot":""}